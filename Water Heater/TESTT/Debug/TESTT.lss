
TESTT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ece  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  00000ece  00000f62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000cc  008000cc  00000fce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001000  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000250b  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e62  00000000  00000000  00003817  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000169c  00000000  00000000  00004679  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000640  00000000  00000000  00005d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000770  00000000  00000000  00006358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016a8  00000000  00000000  00006ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00008170  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_1>
   8:	0c 94 91 01 	jmp	0x322	; 0x322 <__vector_2>
   c:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3c       	cpi	r26, 0xCC	; 204
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac ec       	ldi	r26, 0xCC	; 204
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3d       	cpi	r26, 0xD2	; 210
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2d 05 	call	0xa5a	; 0xa5a <main>
  8a:	0c 94 65 07 	jmp	0xeca	; 0xeca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
 //////////////////////////////////////////////////////////////////////////////////////////////////////////    */

void APP_init()
{
	//EEPROM initialization
	EEPROM_init();
  92:	0e 94 86 02 	call	0x50c	; 0x50c <EEPROM_init>
	EEPROM_writeByte(BLOCK_0,addresse,set_Temperture);
  96:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <set_Temperture>
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	80 ea       	ldi	r24, 0xA0	; 160
  9e:	0e 94 89 02 	call	0x512	; 0x512 <EEPROM_writeByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	83 ec       	ldi	r24, 0xC3	; 195
  a4:	99 e0       	ldi	r25, 0x09	; 9
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <APP_init+0x14>
  aa:	00 c0       	rjmp	.+0      	; 0xac <APP_init+0x1a>
  ac:	00 00       	nop
	_delay_ms(10);
	//7segment initialization
	sev_seg_init();
  ae:	0e 94 34 05 	call	0xa68	; 0xa68 <sev_seg_init>
	//LCD initialization
	LCD_int();
  b2:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LCD_int>
	//TEMP SENSOR
	ADC_initi(ADC_Number);
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 bc 04 	call	0x978	; 0x978 <ADC_initi>
	//LED init
	LED_init();
  be:	0e 94 b1 04 	call	0x962	; 0x962 <LED_init>
	//interuptte init
	interupts_init();
  c2:	0e 94 33 03 	call	0x666	; 0x666 <interupts_init>
	//DAN Init
	FAN_init();
  c6:	0e 94 ca 02 	call	0x594	; 0x594 <FAN_init>
	//buzzer init
	Buzzer_init();
  ca:	0e 94 80 02 	call	0x500	; 0x500 <Buzzer_init>
  ce:	08 95       	ret

000000d0 <Mode_OFF>:
	}
}

void Mode_OFF()
{
	Fans_OFF();
  d0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Fans_OFF>
	LED_off();
  d4:	0e 94 ba 04 	call	0x974	; 0x974 <LED_off>
	LCD_Clear();
  d8:	0e 94 00 04 	call	0x800	; 0x800 <LCD_Clear>
	LCD_COMMAND(disply_on_corsor_off);
  dc:	8c e0       	ldi	r24, 0x0C	; 12
  de:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_COMMAND>
	Buzzer_stop();
  e2:	0e 94 84 02 	call	0x508	; 0x508 <Buzzer_stop>
	interupts_OFF();
  e6:	0e 94 48 03 	call	0x690	; 0x690 <interupts_OFF>
	sev_seg_disable();
  ea:	0e 94 38 05 	call	0xa70	; 0xa70 <sev_seg_disable>
	prev_state = OFF;
  ee:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__data_end>
  f2:	08 95       	ret

000000f4 <Mode_ON>:
}

void Mode_ON()
{	
  f4:	cf 92       	push	r12
  f6:	df 92       	push	r13
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	1f 92       	push	r1
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
	char saved_Tempreture = 0;
 10a:	19 82       	std	Y+1, r1	; 0x01
	int Temperture = 0 ;
	interupts_ON();
 10c:	0e 94 41 03 	call	0x682	; 0x682 <interupts_ON>
	if (prev_state ==OFF)
 110:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
 114:	81 11       	cpse	r24, r1
 116:	08 c0       	rjmp	.+16     	; 0x128 <Mode_ON+0x34>
	{
		EEPROM_readByte(BLOCK_0,addresse,&saved_Tempreture);
 118:	ae 01       	movw	r20, r28
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	80 ea       	ldi	r24, 0xA0	; 160
 122:	0e 94 a8 02 	call	0x550	; 0x550 <EEPROM_readByte>
 126:	03 c0       	rjmp	.+6      	; 0x12e <Mode_ON+0x3a>
	}
	else
	{
		saved_Tempreture = set_Temperture;
 128:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <set_Temperture>
 12c:	89 83       	std	Y+1, r24	; 0x01
	}

	Temperture = avg_tempreture();
 12e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <avg_tempreture>
 132:	8c 01       	movw	r16, r24
	sev_seg_enable();
 134:	0e 94 36 05 	call	0xa6c	; 0xa6c <sev_seg_enable>
	if (temp != Temperture || prev_state == set_tempe || prev_state == OFF)
 138:	78 01       	movw	r14, r16
 13a:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <temp>
 13e:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <temp+0x1>
 142:	80 17       	cp	r24, r16
 144:	91 07       	cpc	r25, r17
 146:	21 f4       	brne	.+8      	; 0x150 <Mode_ON+0x5c>
 148:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
 14c:	8d 7f       	andi	r24, 0xFD	; 253
 14e:	11 f5       	brne	.+68     	; 0x194 <Mode_ON+0xa0>
	{	
		sev_seg_1_displaynumper(Temperture/10);
 150:	c8 01       	movw	r24, r16
 152:	6a e0       	ldi	r22, 0x0A	; 10
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__divmodhi4>
 15a:	6c 01       	movw	r12, r24
 15c:	cb 01       	movw	r24, r22
 15e:	0e 94 3a 05 	call	0xa74	; 0xa74 <sev_seg_1_displaynumper>
		sev_seg_2_displaynumper(Temperture%10);
 162:	c6 01       	movw	r24, r12
 164:	0e 94 75 05 	call	0xaea	; 0xaea <sev_seg_2_displaynumper>
		LCD_COMMAND(disply_on_corsor_off);
 168:	8c e0       	ldi	r24, 0x0C	; 12
 16a:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_COMMAND>
		LCD_Clear();
 16e:	0e 94 00 04 	call	0x800	; 0x800 <LCD_Clear>
		LCD_String("MODE ON ");
 172:	85 e6       	ldi	r24, 0x65	; 101
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
 17a:	83 ec       	ldi	r24, 0xC3	; 195
 17c:	99 e0       	ldi	r25, 0x09	; 9
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <Mode_ON+0x8a>
 182:	00 c0       	rjmp	.+0      	; 0x184 <Mode_ON+0x90>
 184:	00 00       	nop
		_delay_ms(10);
		LCD_Show_temp(Temperture);
 186:	c8 01       	movw	r24, r16
 188:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_Show_temp>
		temp = Temperture;
 18c:	10 93 d0 00 	sts	0x00D0, r17	; 0x8000d0 <temp+0x1>
 190:	00 93 cf 00 	sts	0x00CF, r16	; 0x8000cf <temp>
	{
		//do nothing
	}


	if (Temperture>80 || Temperture<30)
 194:	c8 01       	movw	r24, r16
 196:	4e 97       	sbiw	r24, 0x1e	; 30
 198:	c3 97       	sbiw	r24, 0x33	; 51
 19a:	a0 f0       	brcs	.+40     	; 0x1c4 <Mode_ON+0xd0>
		{
			
			if(read(buzzer_port,buzzer_pin) !=1)
 19c:	90 99       	sbic	0x12, 0	; 18
 19e:	14 c0       	rjmp	.+40     	; 0x1c8 <Mode_ON+0xd4>
			{	
				Buzzer_on();
 1a0:	0e 94 82 02 	call	0x504	; 0x504 <Buzzer_on>
				LCD_Clear();
 1a4:	0e 94 00 04 	call	0x800	; 0x800 <LCD_Clear>
 1a8:	83 ec       	ldi	r24, 0xC3	; 195
 1aa:	99 e0       	ldi	r25, 0x09	; 9
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <Mode_ON+0xb8>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <Mode_ON+0xbe>
 1b2:	00 00       	nop
				_delay_ms(10);
				LCD_Show_temp(Temperture);
 1b4:	c8 01       	movw	r24, r16
 1b6:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_Show_temp>
			    LCD_String(" !warning!");
 1ba:	8e e6       	ldi	r24, 0x6E	; 110
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <Mode_ON+0xd4>
				// do nothing
			}
		}
	else
		{
			Buzzer_stop();
 1c4:	0e 94 84 02 	call	0x508	; 0x508 <Buzzer_stop>
		}

	
	if ((Temperture-saved_Tempreture) > accuracy)
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	98 01       	movw	r18, r16
 1ce:	28 1b       	sub	r18, r24
 1d0:	39 0b       	sbc	r19, r25
 1d2:	26 30       	cpi	r18, 0x06	; 6
 1d4:	31 05       	cpc	r19, r1
 1d6:	a4 f0       	brlt	.+40     	; 0x200 <Mode_ON+0x10c>
	{
		Cooler_ON();
 1d8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Cooler_ON>
		LED_COOLING();
 1dc:	0e 94 b3 04 	call	0x966	; 0x966 <LED_COOLING>
		if (temp != Temperture)
 1e0:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <temp>
 1e4:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <temp+0x1>
 1e8:	e8 16       	cp	r14, r24
 1ea:	f9 06       	cpc	r15, r25
 1ec:	29 f1       	breq	.+74     	; 0x238 <Mode_ON+0x144>
		{
			temp = Temperture;
 1ee:	10 93 d0 00 	sts	0x00D0, r17	; 0x8000d0 <temp+0x1>
 1f2:	00 93 cf 00 	sts	0x00CF, r16	; 0x8000cf <temp>
			LCD_String(" COOLER ON ");
 1f6:	89 e7       	ldi	r24, 0x79	; 121
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
 1fe:	1c c0       	rjmp	.+56     	; 0x238 <Mode_ON+0x144>
		{
			//do nothing
		}
		
	}
	else if ((saved_Tempreture-Temperture) > accuracy)
 200:	80 1b       	sub	r24, r16
 202:	91 0b       	sbc	r25, r17
 204:	06 97       	sbiw	r24, 0x06	; 6
 206:	a4 f0       	brlt	.+40     	; 0x230 <Mode_ON+0x13c>
	{
		Heater_ON();
 208:	0e 94 cd 02 	call	0x59a	; 0x59a <Heater_ON>
		LED_HEATING();
 20c:	0e 94 b5 04 	call	0x96a	; 0x96a <LED_HEATING>
			if (temp != Temperture)
 210:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <temp>
 214:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <temp+0x1>
 218:	e8 16       	cp	r14, r24
 21a:	f9 06       	cpc	r15, r25
 21c:	69 f0       	breq	.+26     	; 0x238 <Mode_ON+0x144>
			{
				temp = Temperture;
 21e:	10 93 d0 00 	sts	0x00D0, r17	; 0x8000d0 <temp+0x1>
 222:	00 93 cf 00 	sts	0x00CF, r16	; 0x8000cf <temp>
				LCD_String(" HEATER ON ");
 226:	85 e8       	ldi	r24, 0x85	; 133
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
 22e:	04 c0       	rjmp	.+8      	; 0x238 <Mode_ON+0x144>
				//do nothing
			}
	}
	else
	{
		Fans_OFF();
 230:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Fans_OFF>
		LED_off();
 234:	0e 94 ba 04 	call	0x974	; 0x974 <LED_off>
	}
	prev_state = ON; 
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__data_end>
}
 23e:	0f 90       	pop	r0
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	cf 90       	pop	r12
 250:	08 95       	ret

00000252 <__vector_3>:
}
	

//ON & OFF BUTTON
ISR(INT2_vect)
{
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	2f 93       	push	r18
 25e:	3f 93       	push	r19
 260:	4f 93       	push	r20
 262:	5f 93       	push	r21
 264:	6f 93       	push	r22
 266:	7f 93       	push	r23
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
 26e:	bf 93       	push	r27
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
	if (state == OFF)       
 274:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <state>
 278:	81 11       	cpse	r24, r1
 27a:	04 c0       	rjmp	.+8      	; 0x284 <__vector_3+0x32>
	{
		//interupts_ON(); 
		state = ON ;    
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <state>
 282:	04 c0       	rjmp	.+8      	; 0x28c <__vector_3+0x3a>
	}
	else
	{
		//interupts_OFF();
		state = OFF;
 284:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <state>
		LCD_off();      
 288:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_off>
	}
}
 28c:	ff 91       	pop	r31
 28e:	ef 91       	pop	r30
 290:	bf 91       	pop	r27
 292:	af 91       	pop	r26
 294:	9f 91       	pop	r25
 296:	8f 91       	pop	r24
 298:	7f 91       	pop	r23
 29a:	6f 91       	pop	r22
 29c:	5f 91       	pop	r21
 29e:	4f 91       	pop	r20
 2a0:	3f 91       	pop	r19
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <__vector_1>:

// UP BUTTON
ISR(INT0_vect)
{
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	2f 93       	push	r18
 2ba:	3f 93       	push	r19
 2bc:	4f 93       	push	r20
 2be:	5f 93       	push	r21
 2c0:	6f 93       	push	r22
 2c2:	7f 93       	push	r23
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
 2c8:	af 93       	push	r26
 2ca:	bf 93       	push	r27
 2cc:	ef 93       	push	r30
 2ce:	ff 93       	push	r31
	if (state != set_tempe)
 2d0:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <state>
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	59 f4       	brne	.+22     	; 0x2ee <__vector_1+0x40>
	{
		state = set_tempe;
	}
	else
	{
		if (set_Temperture >= 75)
 2d8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <set_Temperture>
 2dc:	8b 34       	cpi	r24, 0x4B	; 75
 2de:	20 f0       	brcs	.+8      	; 0x2e8 <__vector_1+0x3a>
		{
			set_Temperture = 75;
 2e0:	8b e4       	ldi	r24, 0x4B	; 75
 2e2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <set_Temperture>
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <__vector_1+0x40>
		}
		else
		{
			set_Temperture = set_Temperture + 5;
 2e8:	8b 5f       	subi	r24, 0xFB	; 251
 2ea:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <set_Temperture>
		}
	}
	state = set_tempe;
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <state>
	timer_Init();
 2f4:	0e 94 b0 05 	call	0xb60	; 0xb60 <timer_Init>
	seconds_counter = 0;
 2f8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
 2fc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
}
 300:	ff 91       	pop	r31
 302:	ef 91       	pop	r30
 304:	bf 91       	pop	r27
 306:	af 91       	pop	r26
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	7f 91       	pop	r23
 30e:	6f 91       	pop	r22
 310:	5f 91       	pop	r21
 312:	4f 91       	pop	r20
 314:	3f 91       	pop	r19
 316:	2f 91       	pop	r18
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <__vector_2>:

// DOWN BUTTON
ISR(INT1_vect)
{
 322:	1f 92       	push	r1
 324:	0f 92       	push	r0
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	0f 92       	push	r0
 32a:	11 24       	eor	r1, r1
 32c:	2f 93       	push	r18
 32e:	3f 93       	push	r19
 330:	4f 93       	push	r20
 332:	5f 93       	push	r21
 334:	6f 93       	push	r22
 336:	7f 93       	push	r23
 338:	8f 93       	push	r24
 33a:	9f 93       	push	r25
 33c:	af 93       	push	r26
 33e:	bf 93       	push	r27
 340:	ef 93       	push	r30
 342:	ff 93       	push	r31
	if (state != set_tempe)
 344:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <state>
 348:	82 30       	cpi	r24, 0x02	; 2
 34a:	59 f4       	brne	.+22     	; 0x362 <__vector_2+0x40>
	{
		state = set_tempe;
	}
	else
	{
		if (set_Temperture <= 35)
 34c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <set_Temperture>
 350:	84 32       	cpi	r24, 0x24	; 36
 352:	20 f4       	brcc	.+8      	; 0x35c <__vector_2+0x3a>
		{
			set_Temperture = 35;
 354:	83 e2       	ldi	r24, 0x23	; 35
 356:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <set_Temperture>
 35a:	03 c0       	rjmp	.+6      	; 0x362 <__vector_2+0x40>
		}
		else
		{
			set_Temperture = set_Temperture - 5;
 35c:	85 50       	subi	r24, 0x05	; 5
 35e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <set_Temperture>
		}
	}
	state = set_tempe;
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <state>
	timer_Init();
 368:	0e 94 b0 05 	call	0xb60	; 0xb60 <timer_Init>
	seconds_counter = 0;
 36c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
 370:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
}
 374:	ff 91       	pop	r31
 376:	ef 91       	pop	r30
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	7f 91       	pop	r23
 382:	6f 91       	pop	r22
 384:	5f 91       	pop	r21
 386:	4f 91       	pop	r20
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <Sev_seg_blink>:

void Sev_seg_blink(unsigned char TEMP)
{		for (int timer = 0;timer<25;timer++)
 396:	ef 92       	push	r14
 398:	ff 92       	push	r15
 39a:	0f 93       	push	r16
 39c:	1f 93       	push	r17
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
	   {
		 sev_seg_enable();
		 sev_seg_1_displaynumper(TEMP/10);
 3a2:	9d ec       	ldi	r25, 0xCD	; 205
 3a4:	89 9f       	mul	r24, r25
 3a6:	91 2d       	mov	r25, r1
 3a8:	11 24       	eor	r1, r1
 3aa:	96 95       	lsr	r25
 3ac:	96 95       	lsr	r25
 3ae:	96 95       	lsr	r25
 3b0:	e9 2e       	mov	r14, r25
 3b2:	f1 2c       	mov	r15, r1
		 sev_seg_2_displaynumper(TEMP%10);
 3b4:	99 0f       	add	r25, r25
 3b6:	29 2f       	mov	r18, r25
 3b8:	22 0f       	add	r18, r18
 3ba:	22 0f       	add	r18, r18
 3bc:	92 0f       	add	r25, r18
 3be:	89 1b       	sub	r24, r25
 3c0:	08 2f       	mov	r16, r24
 3c2:	10 e0       	ldi	r17, 0x00	; 0
 3c4:	c9 e1       	ldi	r28, 0x19	; 25
 3c6:	d0 e0       	ldi	r29, 0x00	; 0
}

void Sev_seg_blink(unsigned char TEMP)
{		for (int timer = 0;timer<25;timer++)
	   {
		 sev_seg_enable();
 3c8:	0e 94 36 05 	call	0xa6c	; 0xa6c <sev_seg_enable>
		 sev_seg_1_displaynumper(TEMP/10);
 3cc:	c7 01       	movw	r24, r14
 3ce:	0e 94 3a 05 	call	0xa74	; 0xa74 <sev_seg_1_displaynumper>
		 sev_seg_2_displaynumper(TEMP%10);
 3d2:	c8 01       	movw	r24, r16
 3d4:	0e 94 75 05 	call	0xaea	; 0xaea <sev_seg_2_displaynumper>
 3d8:	87 ea       	ldi	r24, 0xA7	; 167
 3da:	91 e6       	ldi	r25, 0x61	; 97
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <Sev_seg_blink+0x46>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <Sev_seg_blink+0x4c>
 3e2:	00 00       	nop
		 _delay_ms(100);
		 sev_seg_disable();
 3e4:	0e 94 38 05 	call	0xa70	; 0xa70 <sev_seg_disable>
 3e8:	87 ea       	ldi	r24, 0xA7	; 167
 3ea:	91 e6       	ldi	r25, 0x61	; 97
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <Sev_seg_blink+0x56>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <Sev_seg_blink+0x5c>
 3f2:	00 00       	nop
 3f4:	21 97       	sbiw	r28, 0x01	; 1
	timer_Init();
	seconds_counter = 0;
}

void Sev_seg_blink(unsigned char TEMP)
{		for (int timer = 0;timer<25;timer++)
 3f6:	41 f7       	brne	.-48     	; 0x3c8 <Sev_seg_blink+0x32>
		 sev_seg_2_displaynumper(TEMP%10);
		 _delay_ms(100);
		 sev_seg_disable();
		 _delay_ms(100);
	   }
}
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	0f 91       	pop	r16
 400:	ff 90       	pop	r15
 402:	ef 90       	pop	r14
 404:	08 95       	ret

00000406 <Mode_set_tepmerture>:
}

void Mode_set_tepmerture()
{	unsigned char Temperture = 0 ;
	//EEPROM_readByte(BLOCK_0,addresse,&Temperture);
	LCD_Clear();
 406:	0e 94 00 04 	call	0x800	; 0x800 <LCD_Clear>
 40a:	83 ec       	ldi	r24, 0xC3	; 195
 40c:	99 e0       	ldi	r25, 0x09	; 9
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <Mode_set_tepmerture+0x8>
 412:	00 c0       	rjmp	.+0      	; 0x414 <Mode_set_tepmerture+0xe>
 414:	00 00       	nop
	_delay_ms(10);
	Buzzer_stop();
 416:	0e 94 84 02 	call	0x508	; 0x508 <Buzzer_stop>
	
	LCD_String("SET TEMP MODE");
 41a:	81 e9       	ldi	r24, 0x91	; 145
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
 422:	87 ea       	ldi	r24, 0xA7	; 167
 424:	91 e6       	ldi	r25, 0x61	; 97
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <Mode_set_tepmerture+0x20>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <Mode_set_tepmerture+0x26>
 42c:	00 00       	nop
	_delay_ms(100);

	if (Temperture != set_Temperture)
 42e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <set_Temperture>
 432:	88 23       	and	r24, r24
 434:	19 f0       	breq	.+6      	; 0x43c <Mode_set_tepmerture+0x36>
	{
		LCD_Show_set_temp(set_Temperture);
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Show_set_temp>
	}
	else
	{
		Temperture = set_Temperture;
	}
	Sev_seg_blink(set_Temperture);
 43c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <set_Temperture>
 440:	0e 94 cb 01 	call	0x396	; 0x396 <Sev_seg_blink>
	
	LED_off();
 444:	0e 94 ba 04 	call	0x974	; 0x974 <LED_off>
	Fans_OFF();
 448:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Fans_OFF>
	if (tick_counter >= 625)
 44c:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <tick_counter>
 450:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <tick_counter+0x1>
 454:	81 37       	cpi	r24, 0x71	; 113
 456:	92 40       	sbci	r25, 0x02	; 2
 458:	dc f0       	brlt	.+54     	; 0x490 <Mode_set_tepmerture+0x8a>
	{
		seconds_counter++;
 45a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 45e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 468:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		tick_counter = 0;
 46c:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <tick_counter+0x1>
 470:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <tick_counter>
		if (seconds_counter < delay)
 474:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <delay>
 478:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <delay+0x1>
 47c:	82 17       	cp	r24, r18
 47e:	93 07       	cpc	r25, r19
 480:	1c f4       	brge	.+6      	; 0x488 <Mode_set_tepmerture+0x82>
		{
			interupts_OFF();
 482:	0e 94 48 03 	call	0x690	; 0x690 <interupts_OFF>
 486:	04 c0       	rjmp	.+8      	; 0x490 <Mode_set_tepmerture+0x8a>
		}
		else
		{
			interupts_ON();
 488:	0e 94 41 03 	call	0x682	; 0x682 <interupts_ON>
			timer_OFF();
 48c:	0e 94 c9 05 	call	0xb92	; 0xb92 <timer_OFF>
		}
	}
	
	EEPROM_writeByte(BLOCK_0,addresse,set_Temperture);
 490:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <set_Temperture>
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	80 ea       	ldi	r24, 0xA0	; 160
 498:	0e 94 89 02 	call	0x512	; 0x512 <EEPROM_writeByte>
	 
	state = ON;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <state>
	prev_state = set_tempe;
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__data_end>
 4a8:	08 95       	ret

000004aa <APP_start>:

void APP_start()
{	
	while(1)
	{
		if(state == OFF)
 4aa:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <state>
 4ae:	81 11       	cpse	r24, r1
 4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <APP_start+0xe>
		{
			Mode_OFF();
 4b2:	0e 94 68 00 	call	0xd0	; 0xd0 <Mode_OFF>
 4b6:	f9 cf       	rjmp	.-14     	; 0x4aa <APP_start>
		}
		else if (state == ON)
 4b8:	81 30       	cpi	r24, 0x01	; 1
 4ba:	19 f4       	brne	.+6      	; 0x4c2 <APP_start+0x18>
		{
			Mode_ON();
 4bc:	0e 94 7a 00 	call	0xf4	; 0xf4 <Mode_ON>
 4c0:	f4 cf       	rjmp	.-24     	; 0x4aa <APP_start>
		}
		else if (state == set_tempe)
 4c2:	82 30       	cpi	r24, 0x02	; 2
 4c4:	19 f4       	brne	.+6      	; 0x4cc <APP_start+0x22>
		{
			Mode_set_tepmerture();
 4c6:	0e 94 03 02 	call	0x406	; 0x406 <Mode_set_tepmerture>
 4ca:	ef cf       	rjmp	.-34     	; 0x4aa <APP_start>
		}
		else
		{
			state = OFF;
 4cc:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <state>
 4d0:	ec cf       	rjmp	.-40     	; 0x4aa <APP_start>

000004d2 <__vector_10>:
		 _delay_ms(100);
	   }
}

ISR(TIMER0_COMP_vect)
{
 4d2:	1f 92       	push	r1
 4d4:	0f 92       	push	r0
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	0f 92       	push	r0
 4da:	11 24       	eor	r1, r1
 4dc:	8f 93       	push	r24
 4de:	9f 93       	push	r25
	tick_counter++;
 4e0:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <tick_counter>
 4e4:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <tick_counter+0x1>
 4e8:	01 96       	adiw	r24, 0x01	; 1
 4ea:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <tick_counter+0x1>
 4ee:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <tick_counter>
}
 4f2:	9f 91       	pop	r25
 4f4:	8f 91       	pop	r24
 4f6:	0f 90       	pop	r0
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <Buzzer_init>:
#include "Buzzer.h"
#include "BitWiseOperation.h"

void Buzzer_init()
{
	set(buzzer_state,buzzer_pin);
 500:	88 9a       	sbi	0x11, 0	; 17
 502:	08 95       	ret

00000504 <Buzzer_on>:
}

void Buzzer_on ()
{
	set(buzzer_port,buzzer_pin);	
 504:	90 9a       	sbi	0x12, 0	; 18
 506:	08 95       	ret

00000508 <Buzzer_stop>:
}

void Buzzer_stop()
{
	clear(buzzer_port,buzzer_pin);
 508:	90 98       	cbi	0x12, 0	; 18
 50a:	08 95       	ret

0000050c <EEPROM_init>:
 50c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <I2C_Init>
 510:	08 95       	ret

00000512 <EEPROM_writeByte>:
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	d6 2f       	mov	r29, r22
 518:	c4 2f       	mov	r28, r20
 51a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <I2C_Start>
 51e:	8d 2f       	mov	r24, r29
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 14 03 	call	0x628	; 0x628 <I2C_Write>
 526:	83 ec       	ldi	r24, 0xC3	; 195
 528:	99 e0       	ldi	r25, 0x09	; 9
 52a:	01 97       	sbiw	r24, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <EEPROM_writeByte+0x18>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <EEPROM_writeByte+0x1e>
 530:	00 00       	nop
 532:	8c 2f       	mov	r24, r28
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 14 03 	call	0x628	; 0x628 <I2C_Write>
 53a:	83 ec       	ldi	r24, 0xC3	; 195
 53c:	99 e0       	ldi	r25, 0x09	; 9
 53e:	01 97       	sbiw	r24, 0x01	; 1
 540:	f1 f7       	brne	.-4      	; 0x53e <EEPROM_writeByte+0x2c>
 542:	00 c0       	rjmp	.+0      	; 0x544 <EEPROM_writeByte+0x32>
 544:	00 00       	nop
 546:	0e 94 2d 03 	call	0x65a	; 0x65a <I2C_Stop>
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	08 95       	ret

00000550 <EEPROM_readByte>:
 550:	0f 93       	push	r16
 552:	1f 93       	push	r17
 554:	cf 93       	push	r28
 556:	df 93       	push	r29
 558:	c8 2f       	mov	r28, r24
 55a:	d6 2f       	mov	r29, r22
 55c:	8a 01       	movw	r16, r20
 55e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <I2C_Start>
 562:	8d 2f       	mov	r24, r29
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 14 03 	call	0x628	; 0x628 <I2C_Write>
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	8c 0f       	add	r24, r28
 56e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <I2C_Repeated_Start>
 572:	0e 94 26 03 	call	0x64c	; 0x64c <I2C_Read_Ack>
 576:	f8 01       	movw	r30, r16
 578:	80 83       	st	Z, r24
 57a:	83 ec       	ldi	r24, 0xC3	; 195
 57c:	99 e0       	ldi	r25, 0x09	; 9
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <EEPROM_readByte+0x2e>
 582:	00 c0       	rjmp	.+0      	; 0x584 <EEPROM_readByte+0x34>
 584:	00 00       	nop
 586:	0e 94 2d 03 	call	0x65a	; 0x65a <I2C_Stop>
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	1f 91       	pop	r17
 590:	0f 91       	pop	r16
 592:	08 95       	ret

00000594 <FAN_init>:
 594:	b8 9a       	sbi	0x17, 0	; 23
 596:	b9 9a       	sbi	0x17, 1	; 23
 598:	08 95       	ret

0000059a <Heater_ON>:
 59a:	c0 9a       	sbi	0x18, 0	; 24
 59c:	c1 98       	cbi	0x18, 1	; 24
 59e:	08 95       	ret

000005a0 <Cooler_ON>:
 5a0:	c0 98       	cbi	0x18, 0	; 24
 5a2:	c1 9a       	sbi	0x18, 1	; 24
 5a4:	08 95       	ret

000005a6 <Fans_OFF>:
 5a6:	c0 98       	cbi	0x18, 0	; 24
 5a8:	c1 98       	cbi	0x18, 1	; 24
 5aa:	08 95       	ret

000005ac <I2C_Init>:
 5ac:	11 b8       	out	0x01, r1	; 1
 5ae:	8a e2       	ldi	r24, 0x2A	; 42
 5b0:	80 b9       	out	0x00, r24	; 0
 5b2:	08 95       	ret

000005b4 <I2C_Start>:
 5b4:	94 ea       	ldi	r25, 0xA4	; 164
 5b6:	96 bf       	out	0x36, r25	; 54
 5b8:	06 b6       	in	r0, 0x36	; 54
 5ba:	07 fe       	sbrs	r0, 7
 5bc:	fd cf       	rjmp	.-6      	; 0x5b8 <I2C_Start+0x4>
 5be:	91 b1       	in	r25, 0x01	; 1
 5c0:	98 7f       	andi	r25, 0xF8	; 248
 5c2:	98 30       	cpi	r25, 0x08	; 8
 5c4:	71 f4       	brne	.+28     	; 0x5e2 <I2C_Start+0x2e>
 5c6:	83 b9       	out	0x03, r24	; 3
 5c8:	84 e8       	ldi	r24, 0x84	; 132
 5ca:	86 bf       	out	0x36, r24	; 54
 5cc:	06 b6       	in	r0, 0x36	; 54
 5ce:	07 fe       	sbrs	r0, 7
 5d0:	fd cf       	rjmp	.-6      	; 0x5cc <I2C_Start+0x18>
 5d2:	81 b1       	in	r24, 0x01	; 1
 5d4:	88 7f       	andi	r24, 0xF8	; 248
 5d6:	88 31       	cpi	r24, 0x18	; 24
 5d8:	31 f0       	breq	.+12     	; 0x5e6 <I2C_Start+0x32>
 5da:	80 32       	cpi	r24, 0x20	; 32
 5dc:	31 f0       	breq	.+12     	; 0x5ea <I2C_Start+0x36>
 5de:	83 e0       	ldi	r24, 0x03	; 3
 5e0:	08 95       	ret
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	08 95       	ret
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	08 95       	ret
 5ea:	82 e0       	ldi	r24, 0x02	; 2
 5ec:	08 95       	ret

000005ee <I2C_Repeated_Start>:
 5ee:	94 ea       	ldi	r25, 0xA4	; 164
 5f0:	96 bf       	out	0x36, r25	; 54
 5f2:	06 b6       	in	r0, 0x36	; 54
 5f4:	07 fe       	sbrs	r0, 7
 5f6:	fd cf       	rjmp	.-6      	; 0x5f2 <I2C_Repeated_Start+0x4>
 5f8:	91 b1       	in	r25, 0x01	; 1
 5fa:	98 7f       	andi	r25, 0xF8	; 248
 5fc:	90 31       	cpi	r25, 0x10	; 16
 5fe:	71 f4       	brne	.+28     	; 0x61c <I2C_Repeated_Start+0x2e>
 600:	83 b9       	out	0x03, r24	; 3
 602:	84 e8       	ldi	r24, 0x84	; 132
 604:	86 bf       	out	0x36, r24	; 54
 606:	06 b6       	in	r0, 0x36	; 54
 608:	07 fe       	sbrs	r0, 7
 60a:	fd cf       	rjmp	.-6      	; 0x606 <I2C_Repeated_Start+0x18>
 60c:	81 b1       	in	r24, 0x01	; 1
 60e:	88 7f       	andi	r24, 0xF8	; 248
 610:	80 34       	cpi	r24, 0x40	; 64
 612:	31 f0       	breq	.+12     	; 0x620 <I2C_Repeated_Start+0x32>
 614:	88 34       	cpi	r24, 0x48	; 72
 616:	31 f0       	breq	.+12     	; 0x624 <I2C_Repeated_Start+0x36>
 618:	83 e0       	ldi	r24, 0x03	; 3
 61a:	08 95       	ret
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	08 95       	ret
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	08 95       	ret
 624:	82 e0       	ldi	r24, 0x02	; 2
 626:	08 95       	ret

00000628 <I2C_Write>:
 628:	83 b9       	out	0x03, r24	; 3
 62a:	84 e8       	ldi	r24, 0x84	; 132
 62c:	86 bf       	out	0x36, r24	; 54
 62e:	06 b6       	in	r0, 0x36	; 54
 630:	07 fe       	sbrs	r0, 7
 632:	fd cf       	rjmp	.-6      	; 0x62e <I2C_Write+0x6>
 634:	81 b1       	in	r24, 0x01	; 1
 636:	88 7f       	andi	r24, 0xF8	; 248
 638:	88 32       	cpi	r24, 0x28	; 40
 63a:	21 f0       	breq	.+8      	; 0x644 <I2C_Write+0x1c>
 63c:	80 33       	cpi	r24, 0x30	; 48
 63e:	21 f0       	breq	.+8      	; 0x648 <I2C_Write+0x20>
 640:	82 e0       	ldi	r24, 0x02	; 2
 642:	08 95       	ret
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	08 95       	ret
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	08 95       	ret

0000064c <I2C_Read_Ack>:
 64c:	84 ec       	ldi	r24, 0xC4	; 196
 64e:	86 bf       	out	0x36, r24	; 54
 650:	06 b6       	in	r0, 0x36	; 54
 652:	07 fe       	sbrs	r0, 7
 654:	fd cf       	rjmp	.-6      	; 0x650 <I2C_Read_Ack+0x4>
 656:	83 b1       	in	r24, 0x03	; 3
 658:	08 95       	ret

0000065a <I2C_Stop>:
 65a:	84 e9       	ldi	r24, 0x94	; 148
 65c:	86 bf       	out	0x36, r24	; 54
 65e:	06 b6       	in	r0, 0x36	; 54
 660:	04 fc       	sbrc	r0, 4
 662:	fd cf       	rjmp	.-6      	; 0x65e <I2C_Stop+0x4>
 664:	08 95       	ret

00000666 <interupts_init>:
 666:	85 b7       	in	r24, 0x35	; 53
 668:	88 60       	ori	r24, 0x08	; 8
 66a:	85 bf       	out	0x35, r24	; 53
 66c:	85 b7       	in	r24, 0x35	; 53
 66e:	82 60       	ori	r24, 0x02	; 2
 670:	85 bf       	out	0x35, r24	; 53
 672:	85 b7       	in	r24, 0x35	; 53
 674:	81 60       	ori	r24, 0x01	; 1
 676:	85 bf       	out	0x35, r24	; 53
 678:	8b b7       	in	r24, 0x3b	; 59
 67a:	80 62       	ori	r24, 0x20	; 32
 67c:	8b bf       	out	0x3b, r24	; 59
 67e:	78 94       	sei
 680:	08 95       	ret

00000682 <interupts_ON>:
 682:	8b b7       	in	r24, 0x3b	; 59
 684:	80 64       	ori	r24, 0x40	; 64
 686:	8b bf       	out	0x3b, r24	; 59
 688:	8b b7       	in	r24, 0x3b	; 59
 68a:	80 68       	ori	r24, 0x80	; 128
 68c:	8b bf       	out	0x3b, r24	; 59
 68e:	08 95       	ret

00000690 <interupts_OFF>:
 690:	8b b7       	in	r24, 0x3b	; 59
 692:	8f 7b       	andi	r24, 0xBF	; 191
 694:	8b bf       	out	0x3b, r24	; 59
 696:	8b b7       	in	r24, 0x3b	; 59
 698:	8f 77       	andi	r24, 0x7F	; 127
 69a:	8b bf       	out	0x3b, r24	; 59
 69c:	08 95       	ret

0000069e <LCD_COMMAND>:
#include "LCD.h"
#include "BitWiseOperation.h"

void LCD_COMMAND(char x)
{
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(0xF0&x);
 69e:	92 b3       	in	r25, 0x12	; 18
 6a0:	9f 70       	andi	r25, 0x0F	; 15
 6a2:	28 2f       	mov	r18, r24
 6a4:	20 7f       	andi	r18, 0xF0	; 240
 6a6:	92 2b       	or	r25, r18
 6a8:	92 bb       	out	0x12, r25	; 18
	
	clear(LCD_CONTROL_PORT,LCD_RS_PIN);
 6aa:	ad 98       	cbi	0x15, 5	; 21
	clear(LCD_CONTROL_PORT,LCD_RW_PIN);
 6ac:	ae 98       	cbi	0x15, 6	; 21
	set(LCD_CONTROL_PORT,LCD_EN_PIN);
 6ae:	af 9a       	sbi	0x15, 7	; 21
 6b0:	eb e4       	ldi	r30, 0x4B	; 75
 6b2:	fd e1       	ldi	r31, 0x1D	; 29
 6b4:	31 97       	sbiw	r30, 0x01	; 1
 6b6:	f1 f7       	brne	.-4      	; 0x6b4 <LCD_COMMAND+0x16>
 6b8:	00 c0       	rjmp	.+0      	; 0x6ba <LCD_COMMAND+0x1c>
 6ba:	00 00       	nop
	_delay_ms(LCD_instruction_Delay/*=2*/);  //_delay_us(20);
	clear(LCD_CONTROL_PORT,LCD_EN_PIN);
 6bc:	af 98       	cbi	0x15, 7	; 21
 6be:	eb e4       	ldi	r30, 0x4B	; 75
 6c0:	fd e1       	ldi	r31, 0x1D	; 29
 6c2:	31 97       	sbiw	r30, 0x01	; 1
 6c4:	f1 f7       	brne	.-4      	; 0x6c2 <LCD_COMMAND+0x24>
 6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <LCD_COMMAND+0x2a>
 6c8:	00 00       	nop
	_delay_ms(LCD_instruction_Delay);
	
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(0xF0&(x<<4));
 6ca:	22 b3       	in	r18, 0x12	; 18
 6cc:	2f 70       	andi	r18, 0x0F	; 15
 6ce:	f0 e1       	ldi	r31, 0x10	; 16
 6d0:	8f 9f       	mul	r24, r31
 6d2:	c0 01       	movw	r24, r0
 6d4:	11 24       	eor	r1, r1
 6d6:	82 2b       	or	r24, r18
 6d8:	82 bb       	out	0x12, r24	; 18
	clear(LCD_CONTROL_PORT,LCD_RS_PIN);
 6da:	ad 98       	cbi	0x15, 5	; 21
	clear(LCD_CONTROL_PORT,LCD_RW_PIN);
 6dc:	ae 98       	cbi	0x15, 6	; 21
	set(LCD_CONTROL_PORT,LCD_EN_PIN);
 6de:	af 9a       	sbi	0x15, 7	; 21
 6e0:	8b e4       	ldi	r24, 0x4B	; 75
 6e2:	9d e1       	ldi	r25, 0x1D	; 29
 6e4:	01 97       	sbiw	r24, 0x01	; 1
 6e6:	f1 f7       	brne	.-4      	; 0x6e4 <LCD_COMMAND+0x46>
 6e8:	00 c0       	rjmp	.+0      	; 0x6ea <LCD_COMMAND+0x4c>
 6ea:	00 00       	nop
	_delay_ms(LCD_instruction_Delay/*=2*/);  //_delay_us(20);
	clear(LCD_CONTROL_PORT,LCD_EN_PIN);
 6ec:	af 98       	cbi	0x15, 7	; 21
 6ee:	eb e4       	ldi	r30, 0x4B	; 75
 6f0:	fd e1       	ldi	r31, 0x1D	; 29
 6f2:	31 97       	sbiw	r30, 0x01	; 1
 6f4:	f1 f7       	brne	.-4      	; 0x6f2 <LCD_COMMAND+0x54>
 6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <LCD_COMMAND+0x5a>
 6f8:	00 00       	nop
 6fa:	08 95       	ret

000006fc <LCD_int>:
}

void LCD_int()
{
	//SETTING LCD PINS AS OUTPUT
	set(LCD_CONTROL_PORT_STATE,LCD_RS_PIN);
 6fc:	a5 9a       	sbi	0x14, 5	; 20
	set(LCD_CONTROL_PORT_STATE,LCD_RW_PIN);
 6fe:	a6 9a       	sbi	0x14, 6	; 20
	set(LCD_CONTROL_PORT_STATE,LCD_EN_PIN);
 700:	a7 9a       	sbi	0x14, 7	; 20
	set(LCD_DATA_PORT_STATE,LCD_D4_PIN);
 702:	8c 9a       	sbi	0x11, 4	; 17
	set(LCD_DATA_PORT_STATE,LCD_D5_PIN);
 704:	8d 9a       	sbi	0x11, 5	; 17
	set(LCD_DATA_PORT_STATE,LCD_D6_PIN);
 706:	8e 9a       	sbi	0x11, 6	; 17
	set(LCD_DATA_PORT_STATE,LCD_D7_PIN);
 708:	8f 9a       	sbi	0x11, 7	; 17
 70a:	87 ea       	ldi	r24, 0xA7	; 167
 70c:	91 e6       	ldi	r25, 0x61	; 97
 70e:	01 97       	sbiw	r24, 0x01	; 1
 710:	f1 f7       	brne	.-4      	; 0x70e <LCD_int+0x12>
 712:	00 c0       	rjmp	.+0      	; 0x714 <LCD_int+0x18>
 714:	00 00       	nop

	_delay_ms(LCD_PowerOn_Delay);
	LCD_COMMAND(send_4bit_intitializsion);		//4-bit bus mode
 716:	82 e0       	ldi	r24, 0x02	; 2
 718:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_COMMAND>
 71c:	8b e4       	ldi	r24, 0x4B	; 75
 71e:	9d e1       	ldi	r25, 0x1D	; 29
 720:	01 97       	sbiw	r24, 0x01	; 1
 722:	f1 f7       	brne	.-4      	; 0x720 <LCD_int+0x24>
 724:	00 c0       	rjmp	.+0      	; 0x726 <LCD_int+0x2a>
 726:	00 00       	nop
	_delay_ms(LCD_instruction_Delay);
	LCD_COMMAND(internal_2lines_4bit);			//function set
 728:	88 e2       	ldi	r24, 0x28	; 40
 72a:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_COMMAND>
 72e:	8b e4       	ldi	r24, 0x4B	; 75
 730:	9d e1       	ldi	r25, 0x1D	; 29
 732:	01 97       	sbiw	r24, 0x01	; 1
 734:	f1 f7       	brne	.-4      	; 0x732 <LCD_int+0x36>
 736:	00 c0       	rjmp	.+0      	; 0x738 <LCD_int+0x3c>
 738:	00 00       	nop
	_delay_ms(LCD_instruction_Delay);
	LCD_COMMAND(home_position);					//return home
 73a:	80 e8       	ldi	r24, 0x80	; 128
 73c:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_COMMAND>
 740:	8b e4       	ldi	r24, 0x4B	; 75
 742:	9d e1       	ldi	r25, 0x1D	; 29
 744:	01 97       	sbiw	r24, 0x01	; 1
 746:	f1 f7       	brne	.-4      	; 0x744 <LCD_int+0x48>
 748:	00 c0       	rjmp	.+0      	; 0x74a <LCD_int+0x4e>
 74a:	00 00       	nop
	_delay_ms(LCD_instruction_Delay);
	LCD_COMMAND(disply_on_corsor_off);			//display on/off control
 74c:	8c e0       	ldi	r24, 0x0C	; 12
 74e:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_COMMAND>
 752:	8b e4       	ldi	r24, 0x4B	; 75
 754:	9d e1       	ldi	r25, 0x1D	; 29
 756:	01 97       	sbiw	r24, 0x01	; 1
 758:	f1 f7       	brne	.-4      	; 0x756 <LCD_int+0x5a>
 75a:	00 c0       	rjmp	.+0      	; 0x75c <LCD_int+0x60>
 75c:	00 00       	nop
	_delay_ms(LCD_instruction_Delay);
	LCD_COMMAND(clear_disply);					//clear display
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_COMMAND>
 764:	8b e4       	ldi	r24, 0x4B	; 75
 766:	9d e1       	ldi	r25, 0x1D	; 29
 768:	01 97       	sbiw	r24, 0x01	; 1
 76a:	f1 f7       	brne	.-4      	; 0x768 <LCD_int+0x6c>
 76c:	00 c0       	rjmp	.+0      	; 0x76e <LCD_int+0x72>
 76e:	00 00       	nop
	_delay_ms(LCD_instruction_Delay);
	LCD_COMMAND(auto_increment);				//entry mode
 770:	86 e0       	ldi	r24, 0x06	; 6
 772:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_COMMAND>
 776:	8b e4       	ldi	r24, 0x4B	; 75
 778:	9d e1       	ldi	r25, 0x1D	; 29
 77a:	01 97       	sbiw	r24, 0x01	; 1
 77c:	f1 f7       	brne	.-4      	; 0x77a <LCD_int+0x7e>
 77e:	00 c0       	rjmp	.+0      	; 0x780 <LCD_int+0x84>
 780:	00 00       	nop
 782:	08 95       	ret

00000784 <LCD_char>:
	_delay_ms(LCD_instruction_Delay);
}

void LCD_char(char x)
{
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(0xF0&x);
 784:	92 b3       	in	r25, 0x12	; 18
 786:	9f 70       	andi	r25, 0x0F	; 15
 788:	28 2f       	mov	r18, r24
 78a:	20 7f       	andi	r18, 0xF0	; 240
 78c:	92 2b       	or	r25, r18
 78e:	92 bb       	out	0x12, r25	; 18
	set(LCD_CONTROL_PORT,LCD_RS_PIN);
 790:	ad 9a       	sbi	0x15, 5	; 21
	clear(LCD_CONTROL_PORT,LCD_RW_PIN);
 792:	ae 98       	cbi	0x15, 6	; 21
	set(LCD_CONTROL_PORT,LCD_EN_PIN);
 794:	af 9a       	sbi	0x15, 7	; 21
 796:	eb e4       	ldi	r30, 0x4B	; 75
 798:	fd e1       	ldi	r31, 0x1D	; 29
 79a:	31 97       	sbiw	r30, 0x01	; 1
 79c:	f1 f7       	brne	.-4      	; 0x79a <LCD_char+0x16>
 79e:	00 c0       	rjmp	.+0      	; 0x7a0 <LCD_char+0x1c>
 7a0:	00 00       	nop
	_delay_ms(LCD_instruction_Delay/*=2*/);  //_delay_us(200);
	clear(LCD_CONTROL_PORT,LCD_EN_PIN);
 7a2:	af 98       	cbi	0x15, 7	; 21
 7a4:	eb e4       	ldi	r30, 0x4B	; 75
 7a6:	fd e1       	ldi	r31, 0x1D	; 29
 7a8:	31 97       	sbiw	r30, 0x01	; 1
 7aa:	f1 f7       	brne	.-4      	; 0x7a8 <LCD_char+0x24>
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <LCD_char+0x2a>
 7ae:	00 00       	nop
	_delay_ms(LCD_instruction_Delay);
	
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(0xF0&(x<<4));
 7b0:	22 b3       	in	r18, 0x12	; 18
 7b2:	2f 70       	andi	r18, 0x0F	; 15
 7b4:	f0 e1       	ldi	r31, 0x10	; 16
 7b6:	8f 9f       	mul	r24, r31
 7b8:	c0 01       	movw	r24, r0
 7ba:	11 24       	eor	r1, r1
 7bc:	82 2b       	or	r24, r18
 7be:	82 bb       	out	0x12, r24	; 18
	set(LCD_CONTROL_PORT,LCD_RS_PIN);
 7c0:	ad 9a       	sbi	0x15, 5	; 21
	clear(LCD_CONTROL_PORT,LCD_RW_PIN);
 7c2:	ae 98       	cbi	0x15, 6	; 21
	set(LCD_CONTROL_PORT,LCD_EN_PIN);
 7c4:	af 9a       	sbi	0x15, 7	; 21
 7c6:	8b e4       	ldi	r24, 0x4B	; 75
 7c8:	9d e1       	ldi	r25, 0x1D	; 29
 7ca:	01 97       	sbiw	r24, 0x01	; 1
 7cc:	f1 f7       	brne	.-4      	; 0x7ca <LCD_char+0x46>
 7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <LCD_char+0x4c>
 7d0:	00 00       	nop
	_delay_ms(LCD_instruction_Delay/*=2*/);  //_delay_us(200);
	clear(LCD_CONTROL_PORT,LCD_EN_PIN);
 7d2:	af 98       	cbi	0x15, 7	; 21
 7d4:	eb e4       	ldi	r30, 0x4B	; 75
 7d6:	fd e1       	ldi	r31, 0x1D	; 29
 7d8:	31 97       	sbiw	r30, 0x01	; 1
 7da:	f1 f7       	brne	.-4      	; 0x7d8 <LCD_char+0x54>
 7dc:	00 c0       	rjmp	.+0      	; 0x7de <LCD_char+0x5a>
 7de:	00 00       	nop
 7e0:	08 95       	ret

000007e2 <LCD_String>:
	_delay_ms(LCD_instruction_Delay);
}

void LCD_String (char *str)		/* Send string to LCD function  */
{
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 7e8:	88 81       	ld	r24, Y
 7ea:	88 23       	and	r24, r24
 7ec:	31 f0       	breq	.+12     	; 0x7fa <LCD_String+0x18>
 7ee:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_char (str[i]);
 7f0:	0e 94 c2 03 	call	0x784	; 0x784 <LCD_char>
}

void LCD_String (char *str)		/* Send string to LCD function  */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 7f4:	89 91       	ld	r24, Y+
 7f6:	81 11       	cpse	r24, r1
 7f8:	fb cf       	rjmp	.-10     	; 0x7f0 <LCD_String+0xe>
	{
		LCD_char (str[i]);
	}
}
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	08 95       	ret

00000800 <LCD_Clear>:

void LCD_Clear()
{
	LCD_COMMAND (clear_disply);
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_COMMAND>
 806:	8b e4       	ldi	r24, 0x4B	; 75
 808:	9d e1       	ldi	r25, 0x1D	; 29
 80a:	01 97       	sbiw	r24, 0x01	; 1
 80c:	f1 f7       	brne	.-4      	; 0x80a <LCD_Clear+0xa>
 80e:	00 c0       	rjmp	.+0      	; 0x810 <LCD_Clear+0x10>
 810:	00 00       	nop
	_delay_ms(LCD_instruction_Delay);
	LCD_COMMAND (home_position);
 812:	80 e8       	ldi	r24, 0x80	; 128
 814:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_COMMAND>
 818:	08 95       	ret

0000081a <LCD_Show_temp>:
}

void LCD_Show_temp(int x)
{
 81a:	ef 92       	push	r14
 81c:	ff 92       	push	r15
 81e:	0f 93       	push	r16
 820:	1f 93       	push	r17
 822:	cf 93       	push	r28
 824:	df 93       	push	r29
 826:	00 d0       	rcall	.+0      	; 0x828 <LCD_Show_temp+0xe>
 828:	1f 92       	push	r1
 82a:	cd b7       	in	r28, 0x3d	; 61
 82c:	de b7       	in	r29, 0x3e	; 62
 82e:	8c 01       	movw	r16, r24
	LCD_Clear();
 830:	0e 94 00 04 	call	0x800	; 0x800 <LCD_Clear>
	LCD_String("Current Temp");
 834:	8f e9       	ldi	r24, 0x9F	; 159
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
	LCD_COMMAND(NextLine);
 83c:	80 ec       	ldi	r24, 0xC0	; 192
 83e:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_COMMAND>
	unsigned char ch[3]={' '};
 842:	80 e2       	ldi	r24, 0x20	; 32
 844:	89 83       	std	Y+1, r24	; 0x01
	for(int i=0;i<3;i++)
	{
		ch[i]=' ';
 846:	8a 83       	std	Y+2, r24	; 0x02
 848:	8b 83       	std	Y+3, r24	; 0x03
	}
	itoa(x,ch,10);
 84a:	4a e0       	ldi	r20, 0x0A	; 10
 84c:	50 e0       	ldi	r21, 0x00	; 0
 84e:	be 01       	movw	r22, r28
 850:	6f 5f       	subi	r22, 0xFF	; 255
 852:	7f 4f       	sbci	r23, 0xFF	; 255
 854:	c8 01       	movw	r24, r16
 856:	0e 94 25 07 	call	0xe4a	; 0xe4a <itoa>
 85a:	8e 01       	movw	r16, r28
 85c:	0f 5f       	subi	r16, 0xFF	; 255
 85e:	1f 4f       	sbci	r17, 0xFF	; 255
 860:	7e 01       	movw	r14, r28
 862:	84 e0       	ldi	r24, 0x04	; 4
 864:	e8 0e       	add	r14, r24
 866:	f1 1c       	adc	r15, r1
	for (int j=0;j<3;j++)
	{
		if (ch[j]<'0'||ch[j]>'9')
 868:	f8 01       	movw	r30, r16
 86a:	81 91       	ld	r24, Z+
 86c:	8f 01       	movw	r16, r30
 86e:	90 ed       	ldi	r25, 0xD0	; 208
 870:	98 0f       	add	r25, r24
 872:	9a 30       	cpi	r25, 0x0A	; 10
 874:	20 f0       	brcs	.+8      	; 0x87e <__stack+0x1f>
		LCD_char(' ');
 876:	80 e2       	ldi	r24, 0x20	; 32
 878:	0e 94 c2 03 	call	0x784	; 0x784 <LCD_char>
 87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
		else
		LCD_char(ch[j]);
 87e:	0e 94 c2 03 	call	0x784	; 0x784 <LCD_char>
	for(int i=0;i<3;i++)
	{
		ch[i]=' ';
	}
	itoa(x,ch,10);
	for (int j=0;j<3;j++)
 882:	0e 15       	cp	r16, r14
 884:	1f 05       	cpc	r17, r15
 886:	81 f7       	brne	.-32     	; 0x868 <__stack+0x9>
		if (ch[j]<'0'||ch[j]>'9')
		LCD_char(' ');
		else
		LCD_char(ch[j]);
	}
	LCD_String("'C");
 888:	8c ea       	ldi	r24, 0xAC	; 172
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
}
 890:	0f 90       	pop	r0
 892:	0f 90       	pop	r0
 894:	0f 90       	pop	r0
 896:	df 91       	pop	r29
 898:	cf 91       	pop	r28
 89a:	1f 91       	pop	r17
 89c:	0f 91       	pop	r16
 89e:	ff 90       	pop	r15
 8a0:	ef 90       	pop	r14
 8a2:	08 95       	ret

000008a4 <LCD_off>:

void LCD_off()
{
	LCD_Clear();
 8a4:	0e 94 00 04 	call	0x800	; 0x800 <LCD_Clear>
	LCD_String("turning off");	
 8a8:	8f ea       	ldi	r24, 0xAF	; 175
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
	LCD_COMMAND(NextLine);
 8b0:	80 ec       	ldi	r24, 0xC0	; 192
 8b2:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_COMMAND>
	LCD_String("    :(");
 8b6:	8b eb       	ldi	r24, 0xBB	; 187
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
 8be:	87 ea       	ldi	r24, 0xA7	; 167
 8c0:	91 e6       	ldi	r25, 0x61	; 97
 8c2:	01 97       	sbiw	r24, 0x01	; 1
 8c4:	f1 f7       	brne	.-4      	; 0x8c2 <LCD_off+0x1e>
 8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <LCD_off+0x24>
 8c8:	00 00       	nop
	_delay_ms(100);
	LCD_Clear();
 8ca:	0e 94 00 04 	call	0x800	; 0x800 <LCD_Clear>
	LCD_COMMAND(disply_on_corsor_off);
 8ce:	8c e0       	ldi	r24, 0x0C	; 12
 8d0:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_COMMAND>
	LCD_CONTROL_PORT=0x00;
 8d4:	15 ba       	out	0x15, r1	; 21
 8d6:	08 95       	ret

000008d8 <LCD_Show_set_temp>:
}

void LCD_Show_set_temp(int x)
{
 8d8:	ef 92       	push	r14
 8da:	ff 92       	push	r15
 8dc:	0f 93       	push	r16
 8de:	1f 93       	push	r17
 8e0:	cf 93       	push	r28
 8e2:	df 93       	push	r29
 8e4:	00 d0       	rcall	.+0      	; 0x8e6 <LCD_Show_set_temp+0xe>
 8e6:	1f 92       	push	r1
 8e8:	cd b7       	in	r28, 0x3d	; 61
 8ea:	de b7       	in	r29, 0x3e	; 62
 8ec:	8c 01       	movw	r16, r24
	LCD_Clear();
 8ee:	0e 94 00 04 	call	0x800	; 0x800 <LCD_Clear>
	LCD_String("Set Temp");
 8f2:	82 ec       	ldi	r24, 0xC2	; 194
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
	LCD_COMMAND(NextLine);
 8fa:	80 ec       	ldi	r24, 0xC0	; 192
 8fc:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_COMMAND>
	unsigned char ch[3]={' '};
 900:	80 e2       	ldi	r24, 0x20	; 32
 902:	89 83       	std	Y+1, r24	; 0x01
	for(int i=0;i<3;i++)
	{
		ch[i]=' ';
 904:	8a 83       	std	Y+2, r24	; 0x02
 906:	8b 83       	std	Y+3, r24	; 0x03
	}
	itoa(x,ch,10);
 908:	4a e0       	ldi	r20, 0x0A	; 10
 90a:	50 e0       	ldi	r21, 0x00	; 0
 90c:	be 01       	movw	r22, r28
 90e:	6f 5f       	subi	r22, 0xFF	; 255
 910:	7f 4f       	sbci	r23, 0xFF	; 255
 912:	c8 01       	movw	r24, r16
 914:	0e 94 25 07 	call	0xe4a	; 0xe4a <itoa>
 918:	8e 01       	movw	r16, r28
 91a:	0f 5f       	subi	r16, 0xFF	; 255
 91c:	1f 4f       	sbci	r17, 0xFF	; 255
 91e:	7e 01       	movw	r14, r28
 920:	84 e0       	ldi	r24, 0x04	; 4
 922:	e8 0e       	add	r14, r24
 924:	f1 1c       	adc	r15, r1
	for (int j=0;j<3;j++)
	{
		if (ch[j]<'0'||ch[j]>'9')
 926:	f8 01       	movw	r30, r16
 928:	81 91       	ld	r24, Z+
 92a:	8f 01       	movw	r16, r30
 92c:	90 ed       	ldi	r25, 0xD0	; 208
 92e:	98 0f       	add	r25, r24
 930:	9a 30       	cpi	r25, 0x0A	; 10
 932:	20 f0       	brcs	.+8      	; 0x93c <LCD_Show_set_temp+0x64>
		LCD_char(' ');
 934:	80 e2       	ldi	r24, 0x20	; 32
 936:	0e 94 c2 03 	call	0x784	; 0x784 <LCD_char>
 93a:	02 c0       	rjmp	.+4      	; 0x940 <LCD_Show_set_temp+0x68>
		else
		LCD_char(ch[j]);
 93c:	0e 94 c2 03 	call	0x784	; 0x784 <LCD_char>
	for(int i=0;i<3;i++)
	{
		ch[i]=' ';
	}
	itoa(x,ch,10);
	for (int j=0;j<3;j++)
 940:	0e 15       	cp	r16, r14
 942:	1f 05       	cpc	r17, r15
 944:	81 f7       	brne	.-32     	; 0x926 <LCD_Show_set_temp+0x4e>
		if (ch[j]<'0'||ch[j]>'9')
		LCD_char(' ');
		else
		LCD_char(ch[j]);
	}
	LCD_String("'C");
 946:	8c ea       	ldi	r24, 0xAC	; 172
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_String>
 94e:	0f 90       	pop	r0
 950:	0f 90       	pop	r0
 952:	0f 90       	pop	r0
 954:	df 91       	pop	r29
 956:	cf 91       	pop	r28
 958:	1f 91       	pop	r17
 95a:	0f 91       	pop	r16
 95c:	ff 90       	pop	r15
 95e:	ef 90       	pop	r14
 960:	08 95       	ret

00000962 <LED_init>:
 962:	d0 9a       	sbi	0x1a, 0	; 26
 964:	08 95       	ret

00000966 <LED_COOLING>:
 966:	d8 9a       	sbi	0x1b, 0	; 27
 968:	08 95       	ret

0000096a <LED_HEATING>:
 96a:	9b b3       	in	r25, 0x1b	; 27
 96c:	81 e0       	ldi	r24, 0x01	; 1
 96e:	89 27       	eor	r24, r25
 970:	8b bb       	out	0x1b, r24	; 27
 972:	08 95       	ret

00000974 <LED_off>:
 974:	d8 98       	cbi	0x1b, 0	; 27
 976:	08 95       	ret

00000978 <ADC_initi>:
 978:	d1 98       	cbi	0x1a, 1	; 26
 97a:	97 b1       	in	r25, 0x07	; 7
 97c:	89 2b       	or	r24, r25
 97e:	87 b9       	out	0x07, r24	; 7
 980:	3e 9a       	sbi	0x07, 6	; 7
 982:	37 9a       	sbi	0x06, 7	; 6
 984:	30 9a       	sbi	0x06, 0	; 6
 986:	31 9a       	sbi	0x06, 1	; 6
 988:	32 9a       	sbi	0x06, 2	; 6
 98a:	08 95       	ret

0000098c <ADC_read>:
 98c:	36 9a       	sbi	0x06, 6	; 6
 98e:	34 9b       	sbis	0x06, 4	; 6
 990:	fe cf       	rjmp	.-4      	; 0x98e <ADC_read+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 992:	83 e0       	ldi	r24, 0x03	; 3
 994:	8a 95       	dec	r24
 996:	f1 f7       	brne	.-4      	; 0x994 <ADC_read+0x8>
 998:	00 00       	nop
 99a:	24 b1       	in	r18, 0x04	; 4
 99c:	85 b1       	in	r24, 0x05	; 5
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	98 2f       	mov	r25, r24
 9a2:	88 27       	eor	r24, r24
 9a4:	82 0f       	add	r24, r18
 9a6:	91 1d       	adc	r25, r1
 9a8:	08 95       	ret

000009aa <avg_tempreture>:
 9aa:	1f 93       	push	r17
 9ac:	cf 93       	push	r28
 9ae:	df 93       	push	r29
 9b0:	81 e0       	ldi	r24, 0x01	; 1
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	0e 94 bc 04 	call	0x978	; 0x978 <ADC_initi>
 9b8:	81 e0       	ldi	r24, 0x01	; 1
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	0e 94 c6 04 	call	0x98c	; 0x98c <ADC_read>
 9c0:	bc 01       	movw	r22, r24
 9c2:	80 e0       	ldi	r24, 0x00	; 0
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	0e 94 02 06 	call	0xc04	; 0xc04 <__floatunsisf>
 9ca:	20 e0       	ldi	r18, 0x00	; 0
 9cc:	30 e0       	ldi	r19, 0x00	; 0
 9ce:	40 ea       	ldi	r20, 0xA0	; 160
 9d0:	50 e4       	ldi	r21, 0x40	; 64
 9d2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__mulsf3>
 9d6:	20 e0       	ldi	r18, 0x00	; 0
 9d8:	30 e0       	ldi	r19, 0x00	; 0
 9da:	40 e8       	ldi	r20, 0x80	; 128
 9dc:	5a e3       	ldi	r21, 0x3A	; 58
 9de:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__mulsf3>
 9e2:	20 e0       	ldi	r18, 0x00	; 0
 9e4:	30 e0       	ldi	r19, 0x00	; 0
 9e6:	48 ec       	ldi	r20, 0xC8	; 200
 9e8:	52 e4       	ldi	r21, 0x42	; 66
 9ea:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__mulsf3>
 9ee:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fixunssfsi>
 9f2:	1a e0       	ldi	r17, 0x0A	; 10
 9f4:	c0 e0       	ldi	r28, 0x00	; 0
 9f6:	d0 e0       	ldi	r29, 0x00	; 0
 9f8:	c6 0f       	add	r28, r22
 9fa:	d7 1f       	adc	r29, r23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9fc:	87 ea       	ldi	r24, 0xA7	; 167
 9fe:	91 e6       	ldi	r25, 0x61	; 97
 a00:	01 97       	sbiw	r24, 0x01	; 1
 a02:	f1 f7       	brne	.-4      	; 0xa00 <avg_tempreture+0x56>
 a04:	00 c0       	rjmp	.+0      	; 0xa06 <avg_tempreture+0x5c>
 a06:	00 00       	nop
 a08:	81 e0       	ldi	r24, 0x01	; 1
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	0e 94 c6 04 	call	0x98c	; 0x98c <ADC_read>
 a10:	bc 01       	movw	r22, r24
 a12:	80 e0       	ldi	r24, 0x00	; 0
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 94 02 06 	call	0xc04	; 0xc04 <__floatunsisf>
 a1a:	20 e0       	ldi	r18, 0x00	; 0
 a1c:	30 e0       	ldi	r19, 0x00	; 0
 a1e:	40 ea       	ldi	r20, 0xA0	; 160
 a20:	50 e4       	ldi	r21, 0x40	; 64
 a22:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__mulsf3>
 a26:	20 e0       	ldi	r18, 0x00	; 0
 a28:	30 e0       	ldi	r19, 0x00	; 0
 a2a:	40 e8       	ldi	r20, 0x80	; 128
 a2c:	5a e3       	ldi	r21, 0x3A	; 58
 a2e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__mulsf3>
 a32:	20 e0       	ldi	r18, 0x00	; 0
 a34:	30 e0       	ldi	r19, 0x00	; 0
 a36:	48 ec       	ldi	r20, 0xC8	; 200
 a38:	52 e4       	ldi	r21, 0x42	; 66
 a3a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__mulsf3>
 a3e:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fixunssfsi>
 a42:	11 50       	subi	r17, 0x01	; 1
 a44:	c9 f6       	brne	.-78     	; 0x9f8 <avg_tempreture+0x4e>
 a46:	ce 01       	movw	r24, r28
 a48:	6a e0       	ldi	r22, 0x0A	; 10
 a4a:	70 e0       	ldi	r23, 0x00	; 0
 a4c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__divmodhi4>
 a50:	cb 01       	movw	r24, r22
 a52:	df 91       	pop	r29
 a54:	cf 91       	pop	r28
 a56:	1f 91       	pop	r17
 a58:	08 95       	ret

00000a5a <main>:
#include "APP.h"


int main(void)
{
	APP_init();
 a5a:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	APP_start();
 a5e:	0e 94 55 02 	call	0x4aa	; 0x4aa <APP_start>
}
 a62:	80 e0       	ldi	r24, 0x00	; 0
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	08 95       	ret

00000a68 <sev_seg_init>:
#include "BitWiseOperation.h"
#include <util/delay.h>

void sev_seg_init()
{
	set(Sev_Seg_2_state,Sev_Seg_en);
 a68:	bb 9a       	sbi	0x17, 3	; 23
 a6a:	08 95       	ret

00000a6c <sev_seg_enable>:
		default: ;
	}*/
}

void sev_seg_enable()
{	set(Sev_Seg_2_Port,Sev_Seg_en);
 a6c:	c3 9a       	sbi	0x18, 3	; 24
 a6e:	08 95       	ret

00000a70 <sev_seg_disable>:
	}*/
}

void sev_seg_disable()
{
	clear(Sev_Seg_2_Port,Sev_Seg_en);
 a70:	c3 98       	cbi	0x18, 3	; 24
 a72:	08 95       	ret

00000a74 <sev_seg_1_displaynumper>:
		default: ;
	}*/
}

void sev_seg_1_displaynumper(int N)
{	int bite;
 a74:	dc 01       	movw	r26, r24
	set(Sev_Seg_1_Port,Sev_Seg_1_Pin1);
 a76:	dc 9a       	sbi	0x1b, 4	; 27
	set(Sev_Seg_1_Port,Sev_Seg_1_Pin2);
 a78:	dd 9a       	sbi	0x1b, 5	; 27
	set(Sev_Seg_1_Port,Sev_Seg_1_Pin3);
 a7a:	de 9a       	sbi	0x1b, 6	; 27
	set(Sev_Seg_1_Port,Sev_Seg_1_Pin4);
 a7c:	df 9a       	sbi	0x1b, 7	; 27
		
	if (N <=9)
 a7e:	0a 97       	sbiw	r24, 0x0a	; 10
 a80:	9c f5       	brge	.+102    	; 0xae8 <sev_seg_1_displaynumper+0x74>
 a82:	44 e0       	ldi	r20, 0x04	; 4
 a84:	50 e0       	ldi	r21, 0x00	; 0
	{
		for (int i=4;i<8;i++)
		{
			bite=(N&(1<<(i-4)))>>(i-4);
			if (bite!=0)
 a86:	e1 e0       	ldi	r30, 0x01	; 1
 a88:	f0 e0       	ldi	r31, 0x00	; 0
 a8a:	ba 01       	movw	r22, r20
 a8c:	64 50       	subi	r22, 0x04	; 4
 a8e:	71 09       	sbc	r23, r1
 a90:	9f 01       	movw	r18, r30
 a92:	06 2e       	mov	r0, r22
 a94:	02 c0       	rjmp	.+4      	; 0xa9a <sev_seg_1_displaynumper+0x26>
 a96:	22 0f       	add	r18, r18
 a98:	33 1f       	adc	r19, r19
 a9a:	0a 94       	dec	r0
 a9c:	e2 f7       	brpl	.-8      	; 0xa96 <sev_seg_1_displaynumper+0x22>
 a9e:	2a 23       	and	r18, r26
 aa0:	3b 23       	and	r19, r27
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <sev_seg_1_displaynumper+0x34>
 aa4:	35 95       	asr	r19
 aa6:	27 95       	ror	r18
 aa8:	6a 95       	dec	r22
 aaa:	e2 f7       	brpl	.-8      	; 0xaa4 <sev_seg_1_displaynumper+0x30>
 aac:	23 2b       	or	r18, r19
 aae:	59 f0       	breq	.+22     	; 0xac6 <sev_seg_1_displaynumper+0x52>
			{
				set(Sev_Seg_1_Port,i);
 ab0:	2b b3       	in	r18, 0x1b	; 27
 ab2:	cf 01       	movw	r24, r30
 ab4:	04 2e       	mov	r0, r20
 ab6:	02 c0       	rjmp	.+4      	; 0xabc <sev_seg_1_displaynumper+0x48>
 ab8:	88 0f       	add	r24, r24
 aba:	99 1f       	adc	r25, r25
 abc:	0a 94       	dec	r0
 abe:	e2 f7       	brpl	.-8      	; 0xab8 <sev_seg_1_displaynumper+0x44>
 ac0:	82 2b       	or	r24, r18
 ac2:	8b bb       	out	0x1b, r24	; 27
 ac4:	0c c0       	rjmp	.+24     	; 0xade <sev_seg_1_displaynumper+0x6a>
			}
			else
			{
				clear(Sev_Seg_1_Port,i);
 ac6:	2b b3       	in	r18, 0x1b	; 27
 ac8:	bf 01       	movw	r22, r30
 aca:	04 2e       	mov	r0, r20
 acc:	02 c0       	rjmp	.+4      	; 0xad2 <sev_seg_1_displaynumper+0x5e>
 ace:	66 0f       	add	r22, r22
 ad0:	77 1f       	adc	r23, r23
 ad2:	0a 94       	dec	r0
 ad4:	e2 f7       	brpl	.-8      	; 0xace <sev_seg_1_displaynumper+0x5a>
 ad6:	96 2f       	mov	r25, r22
 ad8:	90 95       	com	r25
 ada:	92 23       	and	r25, r18
 adc:	9b bb       	out	0x1b, r25	; 27
	set(Sev_Seg_1_Port,Sev_Seg_1_Pin3);
	set(Sev_Seg_1_Port,Sev_Seg_1_Pin4);
		
	if (N <=9)
	{
		for (int i=4;i<8;i++)
 ade:	4f 5f       	subi	r20, 0xFF	; 255
 ae0:	5f 4f       	sbci	r21, 0xFF	; 255
 ae2:	48 30       	cpi	r20, 0x08	; 8
 ae4:	51 05       	cpc	r21, r1
 ae6:	89 f6       	brne	.-94     	; 0xa8a <sev_seg_1_displaynumper+0x16>
 ae8:	08 95       	ret

00000aea <sev_seg_2_displaynumper>:
	{
		//do nothing
	}
}
void sev_seg_2_displaynumper(int N)
{	int bite;
 aea:	dc 01       	movw	r26, r24
	set(Sev_Seg_2_Port,Sev_Seg_2_Pin1);
 aec:	c4 9a       	sbi	0x18, 4	; 24
	set(Sev_Seg_2_Port,Sev_Seg_2_Pin2);
 aee:	c5 9a       	sbi	0x18, 5	; 24
	set(Sev_Seg_2_Port,Sev_Seg_2_Pin3);
 af0:	c6 9a       	sbi	0x18, 6	; 24
	set(Sev_Seg_2_Port,Sev_Seg_2_Pin4);
 af2:	c7 9a       	sbi	0x18, 7	; 24
	
	if (N <=9)
 af4:	0a 97       	sbiw	r24, 0x0a	; 10
 af6:	9c f5       	brge	.+102    	; 0xb5e <sev_seg_2_displaynumper+0x74>
 af8:	44 e0       	ldi	r20, 0x04	; 4
 afa:	50 e0       	ldi	r21, 0x00	; 0
	{
		for (int i=4;i<8;i++)
		{
			bite=(N&(1<<(i-4)))>>(i-4);
			if (bite!=0)
 afc:	e1 e0       	ldi	r30, 0x01	; 1
 afe:	f0 e0       	ldi	r31, 0x00	; 0
 b00:	ba 01       	movw	r22, r20
 b02:	64 50       	subi	r22, 0x04	; 4
 b04:	71 09       	sbc	r23, r1
 b06:	9f 01       	movw	r18, r30
 b08:	06 2e       	mov	r0, r22
 b0a:	02 c0       	rjmp	.+4      	; 0xb10 <sev_seg_2_displaynumper+0x26>
 b0c:	22 0f       	add	r18, r18
 b0e:	33 1f       	adc	r19, r19
 b10:	0a 94       	dec	r0
 b12:	e2 f7       	brpl	.-8      	; 0xb0c <sev_seg_2_displaynumper+0x22>
 b14:	2a 23       	and	r18, r26
 b16:	3b 23       	and	r19, r27
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <sev_seg_2_displaynumper+0x34>
 b1a:	35 95       	asr	r19
 b1c:	27 95       	ror	r18
 b1e:	6a 95       	dec	r22
 b20:	e2 f7       	brpl	.-8      	; 0xb1a <sev_seg_2_displaynumper+0x30>
 b22:	23 2b       	or	r18, r19
 b24:	59 f0       	breq	.+22     	; 0xb3c <sev_seg_2_displaynumper+0x52>
			{
				set(Sev_Seg_2_Port,i);
 b26:	28 b3       	in	r18, 0x18	; 24
 b28:	cf 01       	movw	r24, r30
 b2a:	04 2e       	mov	r0, r20
 b2c:	02 c0       	rjmp	.+4      	; 0xb32 <sev_seg_2_displaynumper+0x48>
 b2e:	88 0f       	add	r24, r24
 b30:	99 1f       	adc	r25, r25
 b32:	0a 94       	dec	r0
 b34:	e2 f7       	brpl	.-8      	; 0xb2e <sev_seg_2_displaynumper+0x44>
 b36:	82 2b       	or	r24, r18
 b38:	88 bb       	out	0x18, r24	; 24
 b3a:	0c c0       	rjmp	.+24     	; 0xb54 <sev_seg_2_displaynumper+0x6a>
			}
			else
			{
				clear(Sev_Seg_2_Port,i);
 b3c:	28 b3       	in	r18, 0x18	; 24
 b3e:	bf 01       	movw	r22, r30
 b40:	04 2e       	mov	r0, r20
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <sev_seg_2_displaynumper+0x5e>
 b44:	66 0f       	add	r22, r22
 b46:	77 1f       	adc	r23, r23
 b48:	0a 94       	dec	r0
 b4a:	e2 f7       	brpl	.-8      	; 0xb44 <sev_seg_2_displaynumper+0x5a>
 b4c:	96 2f       	mov	r25, r22
 b4e:	90 95       	com	r25
 b50:	92 23       	and	r25, r18
 b52:	98 bb       	out	0x18, r25	; 24
	set(Sev_Seg_2_Port,Sev_Seg_2_Pin3);
	set(Sev_Seg_2_Port,Sev_Seg_2_Pin4);
	
	if (N <=9)
	{
		for (int i=4;i<8;i++)
 b54:	4f 5f       	subi	r20, 0xFF	; 255
 b56:	5f 4f       	sbci	r21, 0xFF	; 255
 b58:	48 30       	cpi	r20, 0x08	; 8
 b5a:	51 05       	cpc	r21, r1
 b5c:	89 f6       	brne	.-94     	; 0xb00 <sev_seg_2_displaynumper+0x16>
 b5e:	08 95       	ret

00000b60 <timer_Init>:
 b60:	83 b7       	in	r24, 0x33	; 51
 b62:	88 60       	ori	r24, 0x08	; 8
 b64:	83 bf       	out	0x33, r24	; 51
 b66:	83 b7       	in	r24, 0x33	; 51
 b68:	8f 7e       	andi	r24, 0xEF	; 239
 b6a:	83 bf       	out	0x33, r24	; 51
 b6c:	83 b7       	in	r24, 0x33	; 51
 b6e:	8f 7d       	andi	r24, 0xDF	; 223
 b70:	83 bf       	out	0x33, r24	; 51
 b72:	83 b7       	in	r24, 0x33	; 51
 b74:	8e 7f       	andi	r24, 0xFE	; 254
 b76:	83 bf       	out	0x33, r24	; 51
 b78:	83 b7       	in	r24, 0x33	; 51
 b7a:	82 60       	ori	r24, 0x02	; 2
 b7c:	83 bf       	out	0x33, r24	; 51
 b7e:	83 b7       	in	r24, 0x33	; 51
 b80:	8b 7f       	andi	r24, 0xFB	; 251
 b82:	83 bf       	out	0x33, r24	; 51
 b84:	89 b7       	in	r24, 0x39	; 57
 b86:	82 60       	ori	r24, 0x02	; 2
 b88:	89 bf       	out	0x39, r24	; 57
 b8a:	88 ec       	ldi	r24, 0xC8	; 200
 b8c:	8c bf       	out	0x3c, r24	; 60
 b8e:	12 be       	out	0x32, r1	; 50
 b90:	08 95       	ret

00000b92 <timer_OFF>:
 b92:	83 b7       	in	r24, 0x33	; 51
 b94:	8e 7f       	andi	r24, 0xFE	; 254
 b96:	83 bf       	out	0x33, r24	; 51
 b98:	83 b7       	in	r24, 0x33	; 51
 b9a:	8d 7f       	andi	r24, 0xFD	; 253
 b9c:	83 bf       	out	0x33, r24	; 51
 b9e:	83 b7       	in	r24, 0x33	; 51
 ba0:	8b 7f       	andi	r24, 0xFB	; 251
 ba2:	83 bf       	out	0x33, r24	; 51
 ba4:	08 95       	ret

00000ba6 <__fixunssfsi>:
 ba6:	0e 94 47 06 	call	0xc8e	; 0xc8e <__fp_splitA>
 baa:	88 f0       	brcs	.+34     	; 0xbce <__fixunssfsi+0x28>
 bac:	9f 57       	subi	r25, 0x7F	; 127
 bae:	98 f0       	brcs	.+38     	; 0xbd6 <__fixunssfsi+0x30>
 bb0:	b9 2f       	mov	r27, r25
 bb2:	99 27       	eor	r25, r25
 bb4:	b7 51       	subi	r27, 0x17	; 23
 bb6:	b0 f0       	brcs	.+44     	; 0xbe4 <__fixunssfsi+0x3e>
 bb8:	e1 f0       	breq	.+56     	; 0xbf2 <__fixunssfsi+0x4c>
 bba:	66 0f       	add	r22, r22
 bbc:	77 1f       	adc	r23, r23
 bbe:	88 1f       	adc	r24, r24
 bc0:	99 1f       	adc	r25, r25
 bc2:	1a f0       	brmi	.+6      	; 0xbca <__fixunssfsi+0x24>
 bc4:	ba 95       	dec	r27
 bc6:	c9 f7       	brne	.-14     	; 0xbba <__fixunssfsi+0x14>
 bc8:	14 c0       	rjmp	.+40     	; 0xbf2 <__fixunssfsi+0x4c>
 bca:	b1 30       	cpi	r27, 0x01	; 1
 bcc:	91 f0       	breq	.+36     	; 0xbf2 <__fixunssfsi+0x4c>
 bce:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__fp_zero>
 bd2:	b1 e0       	ldi	r27, 0x01	; 1
 bd4:	08 95       	ret
 bd6:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <__fp_zero>
 bda:	67 2f       	mov	r22, r23
 bdc:	78 2f       	mov	r23, r24
 bde:	88 27       	eor	r24, r24
 be0:	b8 5f       	subi	r27, 0xF8	; 248
 be2:	39 f0       	breq	.+14     	; 0xbf2 <__fixunssfsi+0x4c>
 be4:	b9 3f       	cpi	r27, 0xF9	; 249
 be6:	cc f3       	brlt	.-14     	; 0xbda <__fixunssfsi+0x34>
 be8:	86 95       	lsr	r24
 bea:	77 95       	ror	r23
 bec:	67 95       	ror	r22
 bee:	b3 95       	inc	r27
 bf0:	d9 f7       	brne	.-10     	; 0xbe8 <__fixunssfsi+0x42>
 bf2:	3e f4       	brtc	.+14     	; 0xc02 <__fixunssfsi+0x5c>
 bf4:	90 95       	com	r25
 bf6:	80 95       	com	r24
 bf8:	70 95       	com	r23
 bfa:	61 95       	neg	r22
 bfc:	7f 4f       	sbci	r23, 0xFF	; 255
 bfe:	8f 4f       	sbci	r24, 0xFF	; 255
 c00:	9f 4f       	sbci	r25, 0xFF	; 255
 c02:	08 95       	ret

00000c04 <__floatunsisf>:
 c04:	e8 94       	clt
 c06:	09 c0       	rjmp	.+18     	; 0xc1a <__floatsisf+0x12>

00000c08 <__floatsisf>:
 c08:	97 fb       	bst	r25, 7
 c0a:	3e f4       	brtc	.+14     	; 0xc1a <__floatsisf+0x12>
 c0c:	90 95       	com	r25
 c0e:	80 95       	com	r24
 c10:	70 95       	com	r23
 c12:	61 95       	neg	r22
 c14:	7f 4f       	sbci	r23, 0xFF	; 255
 c16:	8f 4f       	sbci	r24, 0xFF	; 255
 c18:	9f 4f       	sbci	r25, 0xFF	; 255
 c1a:	99 23       	and	r25, r25
 c1c:	a9 f0       	breq	.+42     	; 0xc48 <__floatsisf+0x40>
 c1e:	f9 2f       	mov	r31, r25
 c20:	96 e9       	ldi	r25, 0x96	; 150
 c22:	bb 27       	eor	r27, r27
 c24:	93 95       	inc	r25
 c26:	f6 95       	lsr	r31
 c28:	87 95       	ror	r24
 c2a:	77 95       	ror	r23
 c2c:	67 95       	ror	r22
 c2e:	b7 95       	ror	r27
 c30:	f1 11       	cpse	r31, r1
 c32:	f8 cf       	rjmp	.-16     	; 0xc24 <__floatsisf+0x1c>
 c34:	fa f4       	brpl	.+62     	; 0xc74 <__floatsisf+0x6c>
 c36:	bb 0f       	add	r27, r27
 c38:	11 f4       	brne	.+4      	; 0xc3e <__floatsisf+0x36>
 c3a:	60 ff       	sbrs	r22, 0
 c3c:	1b c0       	rjmp	.+54     	; 0xc74 <__floatsisf+0x6c>
 c3e:	6f 5f       	subi	r22, 0xFF	; 255
 c40:	7f 4f       	sbci	r23, 0xFF	; 255
 c42:	8f 4f       	sbci	r24, 0xFF	; 255
 c44:	9f 4f       	sbci	r25, 0xFF	; 255
 c46:	16 c0       	rjmp	.+44     	; 0xc74 <__floatsisf+0x6c>
 c48:	88 23       	and	r24, r24
 c4a:	11 f0       	breq	.+4      	; 0xc50 <__floatsisf+0x48>
 c4c:	96 e9       	ldi	r25, 0x96	; 150
 c4e:	11 c0       	rjmp	.+34     	; 0xc72 <__floatsisf+0x6a>
 c50:	77 23       	and	r23, r23
 c52:	21 f0       	breq	.+8      	; 0xc5c <__floatsisf+0x54>
 c54:	9e e8       	ldi	r25, 0x8E	; 142
 c56:	87 2f       	mov	r24, r23
 c58:	76 2f       	mov	r23, r22
 c5a:	05 c0       	rjmp	.+10     	; 0xc66 <__floatsisf+0x5e>
 c5c:	66 23       	and	r22, r22
 c5e:	71 f0       	breq	.+28     	; 0xc7c <__floatsisf+0x74>
 c60:	96 e8       	ldi	r25, 0x86	; 134
 c62:	86 2f       	mov	r24, r22
 c64:	70 e0       	ldi	r23, 0x00	; 0
 c66:	60 e0       	ldi	r22, 0x00	; 0
 c68:	2a f0       	brmi	.+10     	; 0xc74 <__floatsisf+0x6c>
 c6a:	9a 95       	dec	r25
 c6c:	66 0f       	add	r22, r22
 c6e:	77 1f       	adc	r23, r23
 c70:	88 1f       	adc	r24, r24
 c72:	da f7       	brpl	.-10     	; 0xc6a <__floatsisf+0x62>
 c74:	88 0f       	add	r24, r24
 c76:	96 95       	lsr	r25
 c78:	87 95       	ror	r24
 c7a:	97 f9       	bld	r25, 7
 c7c:	08 95       	ret

00000c7e <__fp_split3>:
 c7e:	57 fd       	sbrc	r21, 7
 c80:	90 58       	subi	r25, 0x80	; 128
 c82:	44 0f       	add	r20, r20
 c84:	55 1f       	adc	r21, r21
 c86:	59 f0       	breq	.+22     	; 0xc9e <__fp_splitA+0x10>
 c88:	5f 3f       	cpi	r21, 0xFF	; 255
 c8a:	71 f0       	breq	.+28     	; 0xca8 <__fp_splitA+0x1a>
 c8c:	47 95       	ror	r20

00000c8e <__fp_splitA>:
 c8e:	88 0f       	add	r24, r24
 c90:	97 fb       	bst	r25, 7
 c92:	99 1f       	adc	r25, r25
 c94:	61 f0       	breq	.+24     	; 0xcae <__fp_splitA+0x20>
 c96:	9f 3f       	cpi	r25, 0xFF	; 255
 c98:	79 f0       	breq	.+30     	; 0xcb8 <__fp_splitA+0x2a>
 c9a:	87 95       	ror	r24
 c9c:	08 95       	ret
 c9e:	12 16       	cp	r1, r18
 ca0:	13 06       	cpc	r1, r19
 ca2:	14 06       	cpc	r1, r20
 ca4:	55 1f       	adc	r21, r21
 ca6:	f2 cf       	rjmp	.-28     	; 0xc8c <__fp_split3+0xe>
 ca8:	46 95       	lsr	r20
 caa:	f1 df       	rcall	.-30     	; 0xc8e <__fp_splitA>
 cac:	08 c0       	rjmp	.+16     	; 0xcbe <__fp_splitA+0x30>
 cae:	16 16       	cp	r1, r22
 cb0:	17 06       	cpc	r1, r23
 cb2:	18 06       	cpc	r1, r24
 cb4:	99 1f       	adc	r25, r25
 cb6:	f1 cf       	rjmp	.-30     	; 0xc9a <__fp_splitA+0xc>
 cb8:	86 95       	lsr	r24
 cba:	71 05       	cpc	r23, r1
 cbc:	61 05       	cpc	r22, r1
 cbe:	08 94       	sec
 cc0:	08 95       	ret

00000cc2 <__fp_zero>:
 cc2:	e8 94       	clt

00000cc4 <__fp_szero>:
 cc4:	bb 27       	eor	r27, r27
 cc6:	66 27       	eor	r22, r22
 cc8:	77 27       	eor	r23, r23
 cca:	cb 01       	movw	r24, r22
 ccc:	97 f9       	bld	r25, 7
 cce:	08 95       	ret

00000cd0 <__mulsf3>:
 cd0:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__mulsf3x>
 cd4:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_round>
 cd8:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fp_pscA>
 cdc:	38 f0       	brcs	.+14     	; 0xcec <__mulsf3+0x1c>
 cde:	0e 94 e5 06 	call	0xdca	; 0xdca <__fp_pscB>
 ce2:	20 f0       	brcs	.+8      	; 0xcec <__mulsf3+0x1c>
 ce4:	95 23       	and	r25, r21
 ce6:	11 f0       	breq	.+4      	; 0xcec <__mulsf3+0x1c>
 ce8:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_inf>
 cec:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_nan>
 cf0:	11 24       	eor	r1, r1
 cf2:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_szero>

00000cf6 <__mulsf3x>:
 cf6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fp_split3>
 cfa:	70 f3       	brcs	.-36     	; 0xcd8 <__mulsf3+0x8>

00000cfc <__mulsf3_pse>:
 cfc:	95 9f       	mul	r25, r21
 cfe:	c1 f3       	breq	.-16     	; 0xcf0 <__mulsf3+0x20>
 d00:	95 0f       	add	r25, r21
 d02:	50 e0       	ldi	r21, 0x00	; 0
 d04:	55 1f       	adc	r21, r21
 d06:	62 9f       	mul	r22, r18
 d08:	f0 01       	movw	r30, r0
 d0a:	72 9f       	mul	r23, r18
 d0c:	bb 27       	eor	r27, r27
 d0e:	f0 0d       	add	r31, r0
 d10:	b1 1d       	adc	r27, r1
 d12:	63 9f       	mul	r22, r19
 d14:	aa 27       	eor	r26, r26
 d16:	f0 0d       	add	r31, r0
 d18:	b1 1d       	adc	r27, r1
 d1a:	aa 1f       	adc	r26, r26
 d1c:	64 9f       	mul	r22, r20
 d1e:	66 27       	eor	r22, r22
 d20:	b0 0d       	add	r27, r0
 d22:	a1 1d       	adc	r26, r1
 d24:	66 1f       	adc	r22, r22
 d26:	82 9f       	mul	r24, r18
 d28:	22 27       	eor	r18, r18
 d2a:	b0 0d       	add	r27, r0
 d2c:	a1 1d       	adc	r26, r1
 d2e:	62 1f       	adc	r22, r18
 d30:	73 9f       	mul	r23, r19
 d32:	b0 0d       	add	r27, r0
 d34:	a1 1d       	adc	r26, r1
 d36:	62 1f       	adc	r22, r18
 d38:	83 9f       	mul	r24, r19
 d3a:	a0 0d       	add	r26, r0
 d3c:	61 1d       	adc	r22, r1
 d3e:	22 1f       	adc	r18, r18
 d40:	74 9f       	mul	r23, r20
 d42:	33 27       	eor	r19, r19
 d44:	a0 0d       	add	r26, r0
 d46:	61 1d       	adc	r22, r1
 d48:	23 1f       	adc	r18, r19
 d4a:	84 9f       	mul	r24, r20
 d4c:	60 0d       	add	r22, r0
 d4e:	21 1d       	adc	r18, r1
 d50:	82 2f       	mov	r24, r18
 d52:	76 2f       	mov	r23, r22
 d54:	6a 2f       	mov	r22, r26
 d56:	11 24       	eor	r1, r1
 d58:	9f 57       	subi	r25, 0x7F	; 127
 d5a:	50 40       	sbci	r21, 0x00	; 0
 d5c:	9a f0       	brmi	.+38     	; 0xd84 <__mulsf3_pse+0x88>
 d5e:	f1 f0       	breq	.+60     	; 0xd9c <__mulsf3_pse+0xa0>
 d60:	88 23       	and	r24, r24
 d62:	4a f0       	brmi	.+18     	; 0xd76 <__mulsf3_pse+0x7a>
 d64:	ee 0f       	add	r30, r30
 d66:	ff 1f       	adc	r31, r31
 d68:	bb 1f       	adc	r27, r27
 d6a:	66 1f       	adc	r22, r22
 d6c:	77 1f       	adc	r23, r23
 d6e:	88 1f       	adc	r24, r24
 d70:	91 50       	subi	r25, 0x01	; 1
 d72:	50 40       	sbci	r21, 0x00	; 0
 d74:	a9 f7       	brne	.-22     	; 0xd60 <__mulsf3_pse+0x64>
 d76:	9e 3f       	cpi	r25, 0xFE	; 254
 d78:	51 05       	cpc	r21, r1
 d7a:	80 f0       	brcs	.+32     	; 0xd9c <__mulsf3_pse+0xa0>
 d7c:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_inf>
 d80:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_szero>
 d84:	5f 3f       	cpi	r21, 0xFF	; 255
 d86:	e4 f3       	brlt	.-8      	; 0xd80 <__mulsf3_pse+0x84>
 d88:	98 3e       	cpi	r25, 0xE8	; 232
 d8a:	d4 f3       	brlt	.-12     	; 0xd80 <__mulsf3_pse+0x84>
 d8c:	86 95       	lsr	r24
 d8e:	77 95       	ror	r23
 d90:	67 95       	ror	r22
 d92:	b7 95       	ror	r27
 d94:	f7 95       	ror	r31
 d96:	e7 95       	ror	r30
 d98:	9f 5f       	subi	r25, 0xFF	; 255
 d9a:	c1 f7       	brne	.-16     	; 0xd8c <__mulsf3_pse+0x90>
 d9c:	fe 2b       	or	r31, r30
 d9e:	88 0f       	add	r24, r24
 da0:	91 1d       	adc	r25, r1
 da2:	96 95       	lsr	r25
 da4:	87 95       	ror	r24
 da6:	97 f9       	bld	r25, 7
 da8:	08 95       	ret

00000daa <__fp_inf>:
 daa:	97 f9       	bld	r25, 7
 dac:	9f 67       	ori	r25, 0x7F	; 127
 dae:	80 e8       	ldi	r24, 0x80	; 128
 db0:	70 e0       	ldi	r23, 0x00	; 0
 db2:	60 e0       	ldi	r22, 0x00	; 0
 db4:	08 95       	ret

00000db6 <__fp_nan>:
 db6:	9f ef       	ldi	r25, 0xFF	; 255
 db8:	80 ec       	ldi	r24, 0xC0	; 192
 dba:	08 95       	ret

00000dbc <__fp_pscA>:
 dbc:	00 24       	eor	r0, r0
 dbe:	0a 94       	dec	r0
 dc0:	16 16       	cp	r1, r22
 dc2:	17 06       	cpc	r1, r23
 dc4:	18 06       	cpc	r1, r24
 dc6:	09 06       	cpc	r0, r25
 dc8:	08 95       	ret

00000dca <__fp_pscB>:
 dca:	00 24       	eor	r0, r0
 dcc:	0a 94       	dec	r0
 dce:	12 16       	cp	r1, r18
 dd0:	13 06       	cpc	r1, r19
 dd2:	14 06       	cpc	r1, r20
 dd4:	05 06       	cpc	r0, r21
 dd6:	08 95       	ret

00000dd8 <__fp_round>:
 dd8:	09 2e       	mov	r0, r25
 dda:	03 94       	inc	r0
 ddc:	00 0c       	add	r0, r0
 dde:	11 f4       	brne	.+4      	; 0xde4 <__fp_round+0xc>
 de0:	88 23       	and	r24, r24
 de2:	52 f0       	brmi	.+20     	; 0xdf8 <__fp_round+0x20>
 de4:	bb 0f       	add	r27, r27
 de6:	40 f4       	brcc	.+16     	; 0xdf8 <__fp_round+0x20>
 de8:	bf 2b       	or	r27, r31
 dea:	11 f4       	brne	.+4      	; 0xdf0 <__fp_round+0x18>
 dec:	60 ff       	sbrs	r22, 0
 dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__fp_round+0x20>
 df0:	6f 5f       	subi	r22, 0xFF	; 255
 df2:	7f 4f       	sbci	r23, 0xFF	; 255
 df4:	8f 4f       	sbci	r24, 0xFF	; 255
 df6:	9f 4f       	sbci	r25, 0xFF	; 255
 df8:	08 95       	ret

00000dfa <__divmodhi4>:
 dfa:	97 fb       	bst	r25, 7
 dfc:	07 2e       	mov	r0, r23
 dfe:	16 f4       	brtc	.+4      	; 0xe04 <__divmodhi4+0xa>
 e00:	00 94       	com	r0
 e02:	07 d0       	rcall	.+14     	; 0xe12 <__divmodhi4_neg1>
 e04:	77 fd       	sbrc	r23, 7
 e06:	09 d0       	rcall	.+18     	; 0xe1a <__divmodhi4_neg2>
 e08:	0e 94 11 07 	call	0xe22	; 0xe22 <__udivmodhi4>
 e0c:	07 fc       	sbrc	r0, 7
 e0e:	05 d0       	rcall	.+10     	; 0xe1a <__divmodhi4_neg2>
 e10:	3e f4       	brtc	.+14     	; 0xe20 <__divmodhi4_exit>

00000e12 <__divmodhi4_neg1>:
 e12:	90 95       	com	r25
 e14:	81 95       	neg	r24
 e16:	9f 4f       	sbci	r25, 0xFF	; 255
 e18:	08 95       	ret

00000e1a <__divmodhi4_neg2>:
 e1a:	70 95       	com	r23
 e1c:	61 95       	neg	r22
 e1e:	7f 4f       	sbci	r23, 0xFF	; 255

00000e20 <__divmodhi4_exit>:
 e20:	08 95       	ret

00000e22 <__udivmodhi4>:
 e22:	aa 1b       	sub	r26, r26
 e24:	bb 1b       	sub	r27, r27
 e26:	51 e1       	ldi	r21, 0x11	; 17
 e28:	07 c0       	rjmp	.+14     	; 0xe38 <__udivmodhi4_ep>

00000e2a <__udivmodhi4_loop>:
 e2a:	aa 1f       	adc	r26, r26
 e2c:	bb 1f       	adc	r27, r27
 e2e:	a6 17       	cp	r26, r22
 e30:	b7 07       	cpc	r27, r23
 e32:	10 f0       	brcs	.+4      	; 0xe38 <__udivmodhi4_ep>
 e34:	a6 1b       	sub	r26, r22
 e36:	b7 0b       	sbc	r27, r23

00000e38 <__udivmodhi4_ep>:
 e38:	88 1f       	adc	r24, r24
 e3a:	99 1f       	adc	r25, r25
 e3c:	5a 95       	dec	r21
 e3e:	a9 f7       	brne	.-22     	; 0xe2a <__udivmodhi4_loop>
 e40:	80 95       	com	r24
 e42:	90 95       	com	r25
 e44:	bc 01       	movw	r22, r24
 e46:	cd 01       	movw	r24, r26
 e48:	08 95       	ret

00000e4a <itoa>:
 e4a:	45 32       	cpi	r20, 0x25	; 37
 e4c:	51 05       	cpc	r21, r1
 e4e:	20 f4       	brcc	.+8      	; 0xe58 <itoa+0xe>
 e50:	42 30       	cpi	r20, 0x02	; 2
 e52:	10 f0       	brcs	.+4      	; 0xe58 <itoa+0xe>
 e54:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__itoa_ncheck>
 e58:	fb 01       	movw	r30, r22
 e5a:	10 82       	st	Z, r1
 e5c:	cb 01       	movw	r24, r22
 e5e:	08 95       	ret

00000e60 <__itoa_ncheck>:
 e60:	bb 27       	eor	r27, r27
 e62:	4a 30       	cpi	r20, 0x0A	; 10
 e64:	31 f4       	brne	.+12     	; 0xe72 <__itoa_ncheck+0x12>
 e66:	99 23       	and	r25, r25
 e68:	22 f4       	brpl	.+8      	; 0xe72 <__itoa_ncheck+0x12>
 e6a:	bd e2       	ldi	r27, 0x2D	; 45
 e6c:	90 95       	com	r25
 e6e:	81 95       	neg	r24
 e70:	9f 4f       	sbci	r25, 0xFF	; 255
 e72:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__utoa_common>

00000e76 <__utoa_ncheck>:
 e76:	bb 27       	eor	r27, r27

00000e78 <__utoa_common>:
 e78:	fb 01       	movw	r30, r22
 e7a:	55 27       	eor	r21, r21
 e7c:	aa 27       	eor	r26, r26
 e7e:	88 0f       	add	r24, r24
 e80:	99 1f       	adc	r25, r25
 e82:	aa 1f       	adc	r26, r26
 e84:	a4 17       	cp	r26, r20
 e86:	10 f0       	brcs	.+4      	; 0xe8c <__utoa_common+0x14>
 e88:	a4 1b       	sub	r26, r20
 e8a:	83 95       	inc	r24
 e8c:	50 51       	subi	r21, 0x10	; 16
 e8e:	b9 f7       	brne	.-18     	; 0xe7e <__utoa_common+0x6>
 e90:	a0 5d       	subi	r26, 0xD0	; 208
 e92:	aa 33       	cpi	r26, 0x3A	; 58
 e94:	08 f0       	brcs	.+2      	; 0xe98 <__utoa_common+0x20>
 e96:	a9 5d       	subi	r26, 0xD9	; 217
 e98:	a1 93       	st	Z+, r26
 e9a:	00 97       	sbiw	r24, 0x00	; 0
 e9c:	79 f7       	brne	.-34     	; 0xe7c <__utoa_common+0x4>
 e9e:	b1 11       	cpse	r27, r1
 ea0:	b1 93       	st	Z+, r27
 ea2:	11 92       	st	Z+, r1
 ea4:	cb 01       	movw	r24, r22
 ea6:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <strrev>

00000eaa <strrev>:
 eaa:	dc 01       	movw	r26, r24
 eac:	fc 01       	movw	r30, r24
 eae:	67 2f       	mov	r22, r23
 eb0:	71 91       	ld	r23, Z+
 eb2:	77 23       	and	r23, r23
 eb4:	e1 f7       	brne	.-8      	; 0xeae <strrev+0x4>
 eb6:	32 97       	sbiw	r30, 0x02	; 2
 eb8:	04 c0       	rjmp	.+8      	; 0xec2 <strrev+0x18>
 eba:	7c 91       	ld	r23, X
 ebc:	6d 93       	st	X+, r22
 ebe:	70 83       	st	Z, r23
 ec0:	62 91       	ld	r22, -Z
 ec2:	ae 17       	cp	r26, r30
 ec4:	bf 07       	cpc	r27, r31
 ec6:	c8 f3       	brcs	.-14     	; 0xeba <strrev+0x10>
 ec8:	08 95       	ret

00000eca <_exit>:
 eca:	f8 94       	cli

00000ecc <__stop_program>:
 ecc:	ff cf       	rjmp	.-2      	; 0xecc <__stop_program>
