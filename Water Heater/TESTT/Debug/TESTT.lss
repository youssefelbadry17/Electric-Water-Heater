
TESTT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  00000e1c  00000eb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000ca  008000ca  00000f1a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000241e  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e2f  00000000  00000000  00003646  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000153f  00000000  00000000  00004475  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e8  00000000  00000000  000059b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071e  00000000  00000000  00005f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016a7  00000000  00000000  000066ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00007d61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__vector_1>
   8:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_2>
   c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3c       	cpi	r26, 0xCA	; 202
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa ec       	ldi	r26, 0xCA	; 202
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3c       	cpi	r26, 0xCE	; 206
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <main>
  8a:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
 //////////////////////////////////////////////////////////////////////////////////////////////////////////    */

void APP_init()
{
	//EEPROM initialization
	EEPROM_init();
  92:	0e 94 51 02 	call	0x4a2	; 0x4a2 <EEPROM_init>
	EEPROM_writeByte(BLOCK_0,addresse,set_Temperture);
  96:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__data_start>
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	80 ea       	ldi	r24, 0xA0	; 160
  9e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <EEPROM_writeByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	83 ec       	ldi	r24, 0xC3	; 195
  a4:	99 e0       	ldi	r25, 0x09	; 9
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <APP_init+0x14>
  aa:	00 c0       	rjmp	.+0      	; 0xac <APP_init+0x1a>
  ac:	00 00       	nop
	_delay_ms(10);
	//7segment initialization
	sev_seg_init();
  ae:	0e 94 ff 04 	call	0x9fe	; 0x9fe <sev_seg_init>
	//LCD initialization
	LCD_int();
  b2:	0e 94 49 03 	call	0x692	; 0x692 <LCD_int>
	//TEMP SENSOR
	ADC_initi(ADC_Number);
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 87 04 	call	0x90e	; 0x90e <ADC_initi>
	//LED init
	LED_init();
  be:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <LED_init>
	//interuptte init
	interupts_init();
  c2:	0e 94 fe 02 	call	0x5fc	; 0x5fc <interupts_init>
	//DAN Init
	FAN_init();
  c6:	0e 94 95 02 	call	0x52a	; 0x52a <FAN_init>
	//buzzer init
	Buzzer_init();
  ca:	0e 94 45 02 	call	0x48a	; 0x48a <Buzzer_init>
  ce:	08 95       	ret

000000d0 <Mode_OFF>:
	}
}

void Mode_OFF()
{
	Fans_OFF();
  d0:	0e 94 9e 02 	call	0x53c	; 0x53c <Fans_OFF>
	LED_off();
  d4:	0e 94 85 04 	call	0x90a	; 0x90a <LED_off>
	LCD_Clear();
  d8:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_Clear>
	LCD_COMMAND(disply_on_corsor_off);
  dc:	8c e0       	ldi	r24, 0x0C	; 12
  de:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_COMMAND>
	Buzzer_stop();
  e2:	0e 94 4f 02 	call	0x49e	; 0x49e <Buzzer_stop>
	interupts_OFF();
  e6:	0e 94 13 03 	call	0x626	; 0x626 <interupts_OFF>
	sev_seg_disable();
  ea:	0e 94 03 05 	call	0xa06	; 0xa06 <sev_seg_disable>
  ee:	08 95       	ret

000000f0 <Mode_ON>:
}

void Mode_ON()
{	
  f0:	cf 92       	push	r12
  f2:	df 92       	push	r13
  f4:	ef 92       	push	r14
  f6:	ff 92       	push	r15
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	1f 92       	push	r1
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
	char saved_Tempreture = 0;
 106:	19 82       	std	Y+1, r1	; 0x01
	int Temperture = 0 ;
	interupts_ON();
 108:	0e 94 0c 03 	call	0x618	; 0x618 <interupts_ON>
	if (prev_state ==OFF)
 10c:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__data_end>
 110:	81 11       	cpse	r24, r1
 112:	08 c0       	rjmp	.+16     	; 0x124 <Mode_ON+0x34>
	{
		EEPROM_readByte(BLOCK_0,addresse,&saved_Tempreture);
 114:	ae 01       	movw	r20, r28
 116:	4f 5f       	subi	r20, 0xFF	; 255
 118:	5f 4f       	sbci	r21, 0xFF	; 255
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	80 ea       	ldi	r24, 0xA0	; 160
 11e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <EEPROM_readByte>
 122:	03 c0       	rjmp	.+6      	; 0x12a <Mode_ON+0x3a>
	}
	else
	{
		saved_Tempreture = set_Temperture;
 124:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 128:	89 83       	std	Y+1, r24	; 0x01
	}

	Temperture = avg_tempreture();
 12a:	0e 94 a0 04 	call	0x940	; 0x940 <avg_tempreture>
 12e:	8c 01       	movw	r16, r24
	sev_seg_enable();
 130:	0e 94 01 05 	call	0xa02	; 0xa02 <sev_seg_enable>
	if (temp != Temperture || prev_state == set_tempe)
 134:	78 01       	movw	r14, r16
 136:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <temp>
 13a:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <temp+0x1>
 13e:	80 17       	cp	r24, r16
 140:	91 07       	cpc	r25, r17
 142:	21 f4       	brne	.+8      	; 0x14c <Mode_ON+0x5c>
 144:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__data_end>
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	11 f5       	brne	.+68     	; 0x190 <Mode_ON+0xa0>
	{	
		sev_seg_1_displaynumper(Temperture/10);
 14c:	c8 01       	movw	r24, r16
 14e:	6a e0       	ldi	r22, 0x0A	; 10
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	0e 94 a4 06 	call	0xd48	; 0xd48 <__divmodhi4>
 156:	6c 01       	movw	r12, r24
 158:	cb 01       	movw	r24, r22
 15a:	0e 94 05 05 	call	0xa0a	; 0xa0a <sev_seg_1_displaynumper>
		sev_seg_2_displaynumper(Temperture%10);
 15e:	c6 01       	movw	r24, r12
 160:	0e 94 3f 05 	call	0xa7e	; 0xa7e <sev_seg_2_displaynumper>
		LCD_COMMAND(disply_on_corsor_off);
 164:	8c e0       	ldi	r24, 0x0C	; 12
 166:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_COMMAND>
		LCD_Clear();
 16a:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_Clear>
		LCD_String("MODE ON ");
 16e:	81 e6       	ldi	r24, 0x61	; 97
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_String>
 176:	83 ec       	ldi	r24, 0xC3	; 195
 178:	99 e0       	ldi	r25, 0x09	; 9
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <Mode_ON+0x8a>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <Mode_ON+0x90>
 180:	00 00       	nop
		_delay_ms(10);
		LCD_Show_temp(Temperture);
 182:	c8 01       	movw	r24, r16
 184:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <LCD_Show_temp>
		temp = Temperture;
 188:	10 93 cc 00 	sts	0x00CC, r17	; 0x8000cc <temp+0x1>
 18c:	00 93 cb 00 	sts	0x00CB, r16	; 0x8000cb <temp>
	{
		//do nothing
	}


	if (Temperture>80 || Temperture<30)
 190:	c8 01       	movw	r24, r16
 192:	4e 97       	sbiw	r24, 0x1e	; 30
 194:	c3 97       	sbiw	r24, 0x33	; 51
 196:	90 f0       	brcs	.+36     	; 0x1bc <Mode_ON+0xcc>
		{
			Buzzer_on();
 198:	0e 94 47 02 	call	0x48e	; 0x48e <Buzzer_on>
 19c:	83 ed       	ldi	r24, 0xD3	; 211
 19e:	90 e3       	ldi	r25, 0x30	; 48
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <Mode_ON+0xb0>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <Mode_ON+0xb6>
 1a6:	00 00       	nop
			_delay_ms(50);
			LCD_Show_temp(Temperture);
 1a8:	c8 01       	movw	r24, r16
 1aa:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <LCD_Show_temp>
 1ae:	87 ea       	ldi	r24, 0xA7	; 167
 1b0:	91 e6       	ldi	r25, 0x61	; 97
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <Mode_ON+0xc2>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <Mode_ON+0xc8>
 1b8:	00 00       	nop
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <Mode_ON+0xd0>
			_delay_ms(100);
			
		}
	else
		{
			Buzzer_stop();
 1bc:	0e 94 4f 02 	call	0x49e	; 0x49e <Buzzer_stop>
		}

	
	if ((Temperture-saved_Tempreture) > accuracy)
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	98 01       	movw	r18, r16
 1c6:	28 1b       	sub	r18, r24
 1c8:	39 0b       	sbc	r19, r25
 1ca:	26 30       	cpi	r18, 0x06	; 6
 1cc:	31 05       	cpc	r19, r1
 1ce:	a4 f0       	brlt	.+40     	; 0x1f8 <Mode_ON+0x108>
	{
		Cooler_ON();
 1d0:	0e 94 9b 02 	call	0x536	; 0x536 <Cooler_ON>
		LED_COOLING();
 1d4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LED_COOLING>
		if (temp != Temperture)
 1d8:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <temp>
 1dc:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <temp+0x1>
 1e0:	e8 16       	cp	r14, r24
 1e2:	f9 06       	cpc	r15, r25
 1e4:	29 f1       	breq	.+74     	; 0x230 <Mode_ON+0x140>
		{
			temp = Temperture;
 1e6:	10 93 cc 00 	sts	0x00CC, r17	; 0x8000cc <temp+0x1>
 1ea:	00 93 cb 00 	sts	0x00CB, r16	; 0x8000cb <temp>
			LCD_String(" COOLER ON ");
 1ee:	8a e6       	ldi	r24, 0x6A	; 106
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_String>
 1f6:	1c c0       	rjmp	.+56     	; 0x230 <Mode_ON+0x140>
		{
			//do nothing
		}
		
	}
	else if ((saved_Tempreture-Temperture) > accuracy)
 1f8:	80 1b       	sub	r24, r16
 1fa:	91 0b       	sbc	r25, r17
 1fc:	06 97       	sbiw	r24, 0x06	; 6
 1fe:	a4 f0       	brlt	.+40     	; 0x228 <Mode_ON+0x138>
	{
		Heater_ON();
 200:	0e 94 98 02 	call	0x530	; 0x530 <Heater_ON>
		LED_HEATING();
 204:	0e 94 80 04 	call	0x900	; 0x900 <LED_HEATING>
			if (temp != Temperture)
 208:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <temp>
 20c:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <temp+0x1>
 210:	e8 16       	cp	r14, r24
 212:	f9 06       	cpc	r15, r25
 214:	69 f0       	breq	.+26     	; 0x230 <Mode_ON+0x140>
			{
				temp = Temperture;
 216:	10 93 cc 00 	sts	0x00CC, r17	; 0x8000cc <temp+0x1>
 21a:	00 93 cb 00 	sts	0x00CB, r16	; 0x8000cb <temp>
				LCD_String(" HEATER ON ");
 21e:	86 e7       	ldi	r24, 0x76	; 118
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_String>
 226:	04 c0       	rjmp	.+8      	; 0x230 <Mode_ON+0x140>
				//do nothing
			}
	}
	else
	{
		Fans_OFF();
 228:	0e 94 9e 02 	call	0x53c	; 0x53c <Fans_OFF>
		LED_off();
 22c:	0e 94 85 04 	call	0x90a	; 0x90a <LED_off>
	}
	prev_state = ON; 
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__data_end>
}
 236:	0f 90       	pop	r0
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16
 240:	ff 90       	pop	r15
 242:	ef 90       	pop	r14
 244:	df 90       	pop	r13
 246:	cf 90       	pop	r12
 248:	08 95       	ret

0000024a <__vector_3>:
}
	

//ON & OFF BUTTON
ISR(INT2_vect)
{
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	2f 93       	push	r18
 256:	3f 93       	push	r19
 258:	4f 93       	push	r20
 25a:	5f 93       	push	r21
 25c:	6f 93       	push	r22
 25e:	7f 93       	push	r23
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
	if (state == OFF)       
 26c:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <state>
 270:	81 11       	cpse	r24, r1
 272:	04 c0       	rjmp	.+8      	; 0x27c <__vector_3+0x32>
	{
		//interupts_ON(); 
		state = ON ;    
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <state>
 27a:	04 c0       	rjmp	.+8      	; 0x284 <__vector_3+0x3a>
	}
	else
	{
		//interupts_OFF();
		state = OFF;
 27c:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <state>
		LCD_off();      
 280:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_off>
	}
}
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	bf 91       	pop	r27
 28a:	af 91       	pop	r26
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	7f 91       	pop	r23
 292:	6f 91       	pop	r22
 294:	5f 91       	pop	r21
 296:	4f 91       	pop	r20
 298:	3f 91       	pop	r19
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <__vector_1>:

// UP BUTTON
ISR(INT0_vect)
{
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	2f 93       	push	r18
 2b2:	3f 93       	push	r19
 2b4:	4f 93       	push	r20
 2b6:	5f 93       	push	r21
 2b8:	6f 93       	push	r22
 2ba:	7f 93       	push	r23
 2bc:	8f 93       	push	r24
 2be:	9f 93       	push	r25
 2c0:	af 93       	push	r26
 2c2:	bf 93       	push	r27
 2c4:	ef 93       	push	r30
 2c6:	ff 93       	push	r31
	if (state != set_tempe)
 2c8:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <state>
 2cc:	82 30       	cpi	r24, 0x02	; 2
 2ce:	49 f0       	breq	.+18     	; 0x2e2 <__vector_1+0x3c>
	{
		state = set_tempe;
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <state>
		LCD_Show_set_temp(set_Temperture);
 2d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_Show_set_temp>
 2e0:	0b c0       	rjmp	.+22     	; 0x2f8 <__vector_1+0x52>
		
	}
	else
	{
		if (set_Temperture >= 75)
 2e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 2e6:	8b 34       	cpi	r24, 0x4B	; 75
 2e8:	20 f0       	brcs	.+8      	; 0x2f2 <__vector_1+0x4c>
		{
			set_Temperture = 75;
 2ea:	8b e4       	ldi	r24, 0x4B	; 75
 2ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <__vector_1+0x52>
		}
		else
		{
			set_Temperture = set_Temperture + 5;
 2f2:	8b 5f       	subi	r24, 0xFB	; 251
 2f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		}
	}
	state = set_tempe;
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <state>

}
 2fe:	ff 91       	pop	r31
 300:	ef 91       	pop	r30
 302:	bf 91       	pop	r27
 304:	af 91       	pop	r26
 306:	9f 91       	pop	r25
 308:	8f 91       	pop	r24
 30a:	7f 91       	pop	r23
 30c:	6f 91       	pop	r22
 30e:	5f 91       	pop	r21
 310:	4f 91       	pop	r20
 312:	3f 91       	pop	r19
 314:	2f 91       	pop	r18
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <__vector_2>:

// DOWN BUTTON
ISR(INT1_vect)
{
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	2f 93       	push	r18
 32c:	3f 93       	push	r19
 32e:	4f 93       	push	r20
 330:	5f 93       	push	r21
 332:	6f 93       	push	r22
 334:	7f 93       	push	r23
 336:	8f 93       	push	r24
 338:	9f 93       	push	r25
 33a:	af 93       	push	r26
 33c:	bf 93       	push	r27
 33e:	ef 93       	push	r30
 340:	ff 93       	push	r31
	if (state != set_tempe)
 342:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <state>
 346:	82 30       	cpi	r24, 0x02	; 2
 348:	49 f0       	breq	.+18     	; 0x35c <__vector_2+0x3c>
	{
		state = set_tempe;
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <state>
		LCD_Show_set_temp(set_Temperture);
 350:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_Show_set_temp>
 35a:	0b c0       	rjmp	.+22     	; 0x372 <__vector_2+0x52>
	}
	else
	{
		if (set_Temperture <= 35)
 35c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 360:	84 32       	cpi	r24, 0x24	; 36
 362:	20 f4       	brcc	.+8      	; 0x36c <__vector_2+0x4c>
		{
			set_Temperture = 35;
 364:	83 e2       	ldi	r24, 0x23	; 35
 366:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 36a:	03 c0       	rjmp	.+6      	; 0x372 <__vector_2+0x52>
		}
		else
		{
			set_Temperture = set_Temperture - 5;
 36c:	85 50       	subi	r24, 0x05	; 5
 36e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		}
	}
	state = set_tempe;
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <state>

}
 378:	ff 91       	pop	r31
 37a:	ef 91       	pop	r30
 37c:	bf 91       	pop	r27
 37e:	af 91       	pop	r26
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	7f 91       	pop	r23
 386:	6f 91       	pop	r22
 388:	5f 91       	pop	r21
 38a:	4f 91       	pop	r20
 38c:	3f 91       	pop	r19
 38e:	2f 91       	pop	r18
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <Sev_seg_blink>:

void Sev_seg_blink(unsigned char TEMP)
{		for (int timer = 0;timer<25;timer++)
 39a:	ef 92       	push	r14
 39c:	ff 92       	push	r15
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
	   {
		 sev_seg_enable();
		 sev_seg_1_displaynumper(TEMP/10);
 3a6:	9d ec       	ldi	r25, 0xCD	; 205
 3a8:	89 9f       	mul	r24, r25
 3aa:	91 2d       	mov	r25, r1
 3ac:	11 24       	eor	r1, r1
 3ae:	96 95       	lsr	r25
 3b0:	96 95       	lsr	r25
 3b2:	96 95       	lsr	r25
 3b4:	e9 2e       	mov	r14, r25
 3b6:	f1 2c       	mov	r15, r1
		 sev_seg_2_displaynumper(TEMP%10);
 3b8:	99 0f       	add	r25, r25
 3ba:	29 2f       	mov	r18, r25
 3bc:	22 0f       	add	r18, r18
 3be:	22 0f       	add	r18, r18
 3c0:	92 0f       	add	r25, r18
 3c2:	89 1b       	sub	r24, r25
 3c4:	08 2f       	mov	r16, r24
 3c6:	10 e0       	ldi	r17, 0x00	; 0
 3c8:	c9 e1       	ldi	r28, 0x19	; 25
 3ca:	d0 e0       	ldi	r29, 0x00	; 0
}

void Sev_seg_blink(unsigned char TEMP)
{		for (int timer = 0;timer<25;timer++)
	   {
		 sev_seg_enable();
 3cc:	0e 94 01 05 	call	0xa02	; 0xa02 <sev_seg_enable>
		 sev_seg_1_displaynumper(TEMP/10);
 3d0:	c7 01       	movw	r24, r14
 3d2:	0e 94 05 05 	call	0xa0a	; 0xa0a <sev_seg_1_displaynumper>
		 sev_seg_2_displaynumper(TEMP%10);
 3d6:	c8 01       	movw	r24, r16
 3d8:	0e 94 3f 05 	call	0xa7e	; 0xa7e <sev_seg_2_displaynumper>
 3dc:	87 ea       	ldi	r24, 0xA7	; 167
 3de:	91 e6       	ldi	r25, 0x61	; 97
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <Sev_seg_blink+0x46>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <Sev_seg_blink+0x4c>
 3e6:	00 00       	nop
		 _delay_ms(100);
		 sev_seg_disable();
 3e8:	0e 94 03 05 	call	0xa06	; 0xa06 <sev_seg_disable>
 3ec:	87 ea       	ldi	r24, 0xA7	; 167
 3ee:	91 e6       	ldi	r25, 0x61	; 97
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <Sev_seg_blink+0x56>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <Sev_seg_blink+0x5c>
 3f6:	00 00       	nop
 3f8:	21 97       	sbiw	r28, 0x01	; 1
	state = set_tempe;

}

void Sev_seg_blink(unsigned char TEMP)
{		for (int timer = 0;timer<25;timer++)
 3fa:	41 f7       	brne	.-48     	; 0x3cc <Sev_seg_blink+0x32>
		 sev_seg_2_displaynumper(TEMP%10);
		 _delay_ms(100);
		 sev_seg_disable();
		 _delay_ms(100);
	   }
}
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	1f 91       	pop	r17
 402:	0f 91       	pop	r16
 404:	ff 90       	pop	r15
 406:	ef 90       	pop	r14
 408:	08 95       	ret

0000040a <Mode_set_tepmerture>:
}

void Mode_set_tepmerture()
{	//unsigned char Temperture = 0 ;
	//EEPROM_readByte(BLOCK_0,addresse,&Temperture);
	LCD_Clear();
 40a:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_Clear>
 40e:	83 ec       	ldi	r24, 0xC3	; 195
 410:	99 e0       	ldi	r25, 0x09	; 9
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <Mode_set_tepmerture+0x8>
 416:	00 c0       	rjmp	.+0      	; 0x418 <Mode_set_tepmerture+0xe>
 418:	00 00       	nop
	_delay_ms(10);
	LCD_String("SET TEMP MODE");
 41a:	82 e8       	ldi	r24, 0x82	; 130
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_String>
 422:	87 ea       	ldi	r24, 0xA7	; 167
 424:	91 e6       	ldi	r25, 0x61	; 97
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <Mode_set_tepmerture+0x1c>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <Mode_set_tepmerture+0x22>
 42c:	00 00       	nop
	_delay_ms(100);
	LCD_Show_set_temp(set_Temperture);
 42e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_Show_set_temp>
	Sev_seg_blink(set_Temperture);
 438:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 43c:	0e 94 cd 01 	call	0x39a	; 0x39a <Sev_seg_blink>
	LED_off();
 440:	0e 94 85 04 	call	0x90a	; 0x90a <LED_off>
	Fans_OFF();
 444:	0e 94 9e 02 	call	0x53c	; 0x53c <Fans_OFF>
		{
			interupts_ON();
			timer_OFF();
		}
	}*/
	EEPROM_writeByte(BLOCK_0,addresse,set_Temperture);
 448:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__data_start>
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	80 ea       	ldi	r24, 0xA0	; 160
 450:	0e 94 54 02 	call	0x4a8	; 0x4a8 <EEPROM_writeByte>
	 
	state = ON;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <state>
	prev_state = set_tempe;
 45a:	82 e0       	ldi	r24, 0x02	; 2
 45c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__data_end>
 460:	08 95       	ret

00000462 <APP_start>:

void APP_start()
{	
	while(1)
	{
		if(state == OFF)
 462:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <state>
 466:	81 11       	cpse	r24, r1
 468:	03 c0       	rjmp	.+6      	; 0x470 <APP_start+0xe>
		{
			Mode_OFF();
 46a:	0e 94 68 00 	call	0xd0	; 0xd0 <Mode_OFF>
 46e:	f9 cf       	rjmp	.-14     	; 0x462 <APP_start>
		}
		else if (state == ON)
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	19 f4       	brne	.+6      	; 0x47a <APP_start+0x18>
		{
			Mode_ON();
 474:	0e 94 78 00 	call	0xf0	; 0xf0 <Mode_ON>
 478:	f4 cf       	rjmp	.-24     	; 0x462 <APP_start>
		}
		else if (state == set_tempe)
 47a:	82 30       	cpi	r24, 0x02	; 2
 47c:	19 f4       	brne	.+6      	; 0x484 <APP_start+0x22>
		{
			Mode_set_tepmerture();
 47e:	0e 94 05 02 	call	0x40a	; 0x40a <Mode_set_tepmerture>
 482:	ef cf       	rjmp	.-34     	; 0x462 <APP_start>
		}
		else
		{
			state = OFF;
 484:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <state>
 488:	ec cf       	rjmp	.-40     	; 0x462 <APP_start>

0000048a <Buzzer_init>:
#include "Buzzer.h"
#include "BitWiseOperation.h"

void Buzzer_init()
{
	set(buzzer_state,buzzer_pin);
 48a:	88 9a       	sbi	0x11, 0	; 17
 48c:	08 95       	ret

0000048e <Buzzer_on>:
}

void Buzzer_on ()
{
	set(buzzer_port,buzzer_pin);
 48e:	90 9a       	sbi	0x12, 0	; 18
	LCD_Clear();
 490:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_Clear>
	LCD_String("!!!warning!!!");
 494:	80 e9       	ldi	r24, 0x90	; 144
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_String>
 49c:	08 95       	ret

0000049e <Buzzer_stop>:
}

void Buzzer_stop()
{
	clear(buzzer_port,buzzer_pin);
 49e:	90 98       	cbi	0x12, 0	; 18
 4a0:	08 95       	ret

000004a2 <EEPROM_init>:
 4a2:	0e 94 a1 02 	call	0x542	; 0x542 <I2C_Init>
 4a6:	08 95       	ret

000004a8 <EEPROM_writeByte>:
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	d6 2f       	mov	r29, r22
 4ae:	c4 2f       	mov	r28, r20
 4b0:	0e 94 a5 02 	call	0x54a	; 0x54a <I2C_Start>
 4b4:	8d 2f       	mov	r24, r29
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 df 02 	call	0x5be	; 0x5be <I2C_Write>
 4bc:	83 ec       	ldi	r24, 0xC3	; 195
 4be:	99 e0       	ldi	r25, 0x09	; 9
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <EEPROM_writeByte+0x18>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <EEPROM_writeByte+0x1e>
 4c6:	00 00       	nop
 4c8:	8c 2f       	mov	r24, r28
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 df 02 	call	0x5be	; 0x5be <I2C_Write>
 4d0:	83 ec       	ldi	r24, 0xC3	; 195
 4d2:	99 e0       	ldi	r25, 0x09	; 9
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <EEPROM_writeByte+0x2c>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <EEPROM_writeByte+0x32>
 4da:	00 00       	nop
 4dc:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <I2C_Stop>
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <EEPROM_readByte>:
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	c8 2f       	mov	r28, r24
 4f0:	d6 2f       	mov	r29, r22
 4f2:	8a 01       	movw	r16, r20
 4f4:	0e 94 a5 02 	call	0x54a	; 0x54a <I2C_Start>
 4f8:	8d 2f       	mov	r24, r29
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 df 02 	call	0x5be	; 0x5be <I2C_Write>
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	8c 0f       	add	r24, r28
 504:	0e 94 c2 02 	call	0x584	; 0x584 <I2C_Repeated_Start>
 508:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <I2C_Read_Ack>
 50c:	f8 01       	movw	r30, r16
 50e:	80 83       	st	Z, r24
 510:	83 ec       	ldi	r24, 0xC3	; 195
 512:	99 e0       	ldi	r25, 0x09	; 9
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <EEPROM_readByte+0x2e>
 518:	00 c0       	rjmp	.+0      	; 0x51a <EEPROM_readByte+0x34>
 51a:	00 00       	nop
 51c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <I2C_Stop>
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	08 95       	ret

0000052a <FAN_init>:
 52a:	b8 9a       	sbi	0x17, 0	; 23
 52c:	b9 9a       	sbi	0x17, 1	; 23
 52e:	08 95       	ret

00000530 <Heater_ON>:
 530:	c0 9a       	sbi	0x18, 0	; 24
 532:	c1 98       	cbi	0x18, 1	; 24
 534:	08 95       	ret

00000536 <Cooler_ON>:
 536:	c0 98       	cbi	0x18, 0	; 24
 538:	c1 9a       	sbi	0x18, 1	; 24
 53a:	08 95       	ret

0000053c <Fans_OFF>:
 53c:	c0 98       	cbi	0x18, 0	; 24
 53e:	c1 98       	cbi	0x18, 1	; 24
 540:	08 95       	ret

00000542 <I2C_Init>:
 542:	11 b8       	out	0x01, r1	; 1
 544:	8a e2       	ldi	r24, 0x2A	; 42
 546:	80 b9       	out	0x00, r24	; 0
 548:	08 95       	ret

0000054a <I2C_Start>:
 54a:	94 ea       	ldi	r25, 0xA4	; 164
 54c:	96 bf       	out	0x36, r25	; 54
 54e:	06 b6       	in	r0, 0x36	; 54
 550:	07 fe       	sbrs	r0, 7
 552:	fd cf       	rjmp	.-6      	; 0x54e <I2C_Start+0x4>
 554:	91 b1       	in	r25, 0x01	; 1
 556:	98 7f       	andi	r25, 0xF8	; 248
 558:	98 30       	cpi	r25, 0x08	; 8
 55a:	71 f4       	brne	.+28     	; 0x578 <I2C_Start+0x2e>
 55c:	83 b9       	out	0x03, r24	; 3
 55e:	84 e8       	ldi	r24, 0x84	; 132
 560:	86 bf       	out	0x36, r24	; 54
 562:	06 b6       	in	r0, 0x36	; 54
 564:	07 fe       	sbrs	r0, 7
 566:	fd cf       	rjmp	.-6      	; 0x562 <I2C_Start+0x18>
 568:	81 b1       	in	r24, 0x01	; 1
 56a:	88 7f       	andi	r24, 0xF8	; 248
 56c:	88 31       	cpi	r24, 0x18	; 24
 56e:	31 f0       	breq	.+12     	; 0x57c <I2C_Start+0x32>
 570:	80 32       	cpi	r24, 0x20	; 32
 572:	31 f0       	breq	.+12     	; 0x580 <I2C_Start+0x36>
 574:	83 e0       	ldi	r24, 0x03	; 3
 576:	08 95       	ret
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	08 95       	ret
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	08 95       	ret
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	08 95       	ret

00000584 <I2C_Repeated_Start>:
 584:	94 ea       	ldi	r25, 0xA4	; 164
 586:	96 bf       	out	0x36, r25	; 54
 588:	06 b6       	in	r0, 0x36	; 54
 58a:	07 fe       	sbrs	r0, 7
 58c:	fd cf       	rjmp	.-6      	; 0x588 <I2C_Repeated_Start+0x4>
 58e:	91 b1       	in	r25, 0x01	; 1
 590:	98 7f       	andi	r25, 0xF8	; 248
 592:	90 31       	cpi	r25, 0x10	; 16
 594:	71 f4       	brne	.+28     	; 0x5b2 <I2C_Repeated_Start+0x2e>
 596:	83 b9       	out	0x03, r24	; 3
 598:	84 e8       	ldi	r24, 0x84	; 132
 59a:	86 bf       	out	0x36, r24	; 54
 59c:	06 b6       	in	r0, 0x36	; 54
 59e:	07 fe       	sbrs	r0, 7
 5a0:	fd cf       	rjmp	.-6      	; 0x59c <I2C_Repeated_Start+0x18>
 5a2:	81 b1       	in	r24, 0x01	; 1
 5a4:	88 7f       	andi	r24, 0xF8	; 248
 5a6:	80 34       	cpi	r24, 0x40	; 64
 5a8:	31 f0       	breq	.+12     	; 0x5b6 <I2C_Repeated_Start+0x32>
 5aa:	88 34       	cpi	r24, 0x48	; 72
 5ac:	31 f0       	breq	.+12     	; 0x5ba <I2C_Repeated_Start+0x36>
 5ae:	83 e0       	ldi	r24, 0x03	; 3
 5b0:	08 95       	ret
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	08 95       	ret
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	08 95       	ret
 5ba:	82 e0       	ldi	r24, 0x02	; 2
 5bc:	08 95       	ret

000005be <I2C_Write>:
 5be:	83 b9       	out	0x03, r24	; 3
 5c0:	84 e8       	ldi	r24, 0x84	; 132
 5c2:	86 bf       	out	0x36, r24	; 54
 5c4:	06 b6       	in	r0, 0x36	; 54
 5c6:	07 fe       	sbrs	r0, 7
 5c8:	fd cf       	rjmp	.-6      	; 0x5c4 <I2C_Write+0x6>
 5ca:	81 b1       	in	r24, 0x01	; 1
 5cc:	88 7f       	andi	r24, 0xF8	; 248
 5ce:	88 32       	cpi	r24, 0x28	; 40
 5d0:	21 f0       	breq	.+8      	; 0x5da <I2C_Write+0x1c>
 5d2:	80 33       	cpi	r24, 0x30	; 48
 5d4:	21 f0       	breq	.+8      	; 0x5de <I2C_Write+0x20>
 5d6:	82 e0       	ldi	r24, 0x02	; 2
 5d8:	08 95       	ret
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	08 95       	ret
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	08 95       	ret

000005e2 <I2C_Read_Ack>:
 5e2:	84 ec       	ldi	r24, 0xC4	; 196
 5e4:	86 bf       	out	0x36, r24	; 54
 5e6:	06 b6       	in	r0, 0x36	; 54
 5e8:	07 fe       	sbrs	r0, 7
 5ea:	fd cf       	rjmp	.-6      	; 0x5e6 <I2C_Read_Ack+0x4>
 5ec:	83 b1       	in	r24, 0x03	; 3
 5ee:	08 95       	ret

000005f0 <I2C_Stop>:
 5f0:	84 e9       	ldi	r24, 0x94	; 148
 5f2:	86 bf       	out	0x36, r24	; 54
 5f4:	06 b6       	in	r0, 0x36	; 54
 5f6:	04 fc       	sbrc	r0, 4
 5f8:	fd cf       	rjmp	.-6      	; 0x5f4 <I2C_Stop+0x4>
 5fa:	08 95       	ret

000005fc <interupts_init>:
 5fc:	85 b7       	in	r24, 0x35	; 53
 5fe:	88 60       	ori	r24, 0x08	; 8
 600:	85 bf       	out	0x35, r24	; 53
 602:	85 b7       	in	r24, 0x35	; 53
 604:	82 60       	ori	r24, 0x02	; 2
 606:	85 bf       	out	0x35, r24	; 53
 608:	85 b7       	in	r24, 0x35	; 53
 60a:	81 60       	ori	r24, 0x01	; 1
 60c:	85 bf       	out	0x35, r24	; 53
 60e:	8b b7       	in	r24, 0x3b	; 59
 610:	80 62       	ori	r24, 0x20	; 32
 612:	8b bf       	out	0x3b, r24	; 59
 614:	78 94       	sei
 616:	08 95       	ret

00000618 <interupts_ON>:
 618:	8b b7       	in	r24, 0x3b	; 59
 61a:	80 64       	ori	r24, 0x40	; 64
 61c:	8b bf       	out	0x3b, r24	; 59
 61e:	8b b7       	in	r24, 0x3b	; 59
 620:	80 68       	ori	r24, 0x80	; 128
 622:	8b bf       	out	0x3b, r24	; 59
 624:	08 95       	ret

00000626 <interupts_OFF>:
 626:	8b b7       	in	r24, 0x3b	; 59
 628:	8f 7b       	andi	r24, 0xBF	; 191
 62a:	8b bf       	out	0x3b, r24	; 59
 62c:	8b b7       	in	r24, 0x3b	; 59
 62e:	8f 77       	andi	r24, 0x7F	; 127
 630:	8b bf       	out	0x3b, r24	; 59
 632:	08 95       	ret

00000634 <LCD_COMMAND>:
#include "LCD.h"
#include "BitWiseOperation.h"

void LCD_COMMAND(char x)
{
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(0xF0&x);
 634:	92 b3       	in	r25, 0x12	; 18
 636:	9f 70       	andi	r25, 0x0F	; 15
 638:	28 2f       	mov	r18, r24
 63a:	20 7f       	andi	r18, 0xF0	; 240
 63c:	92 2b       	or	r25, r18
 63e:	92 bb       	out	0x12, r25	; 18
	
	clear(LCD_CONTROL_PORT,LCD_RS_PIN);
 640:	ad 98       	cbi	0x15, 5	; 21
	clear(LCD_CONTROL_PORT,LCD_RW_PIN);
 642:	ae 98       	cbi	0x15, 6	; 21
	set(LCD_CONTROL_PORT,LCD_EN_PIN);
 644:	af 9a       	sbi	0x15, 7	; 21
 646:	eb e4       	ldi	r30, 0x4B	; 75
 648:	fd e1       	ldi	r31, 0x1D	; 29
 64a:	31 97       	sbiw	r30, 0x01	; 1
 64c:	f1 f7       	brne	.-4      	; 0x64a <LCD_COMMAND+0x16>
 64e:	00 c0       	rjmp	.+0      	; 0x650 <LCD_COMMAND+0x1c>
 650:	00 00       	nop
	_delay_ms(LCD_instruction_Delay/*=2*/);  //_delay_us(20);
	clear(LCD_CONTROL_PORT,LCD_EN_PIN);
 652:	af 98       	cbi	0x15, 7	; 21
 654:	eb e4       	ldi	r30, 0x4B	; 75
 656:	fd e1       	ldi	r31, 0x1D	; 29
 658:	31 97       	sbiw	r30, 0x01	; 1
 65a:	f1 f7       	brne	.-4      	; 0x658 <LCD_COMMAND+0x24>
 65c:	00 c0       	rjmp	.+0      	; 0x65e <LCD_COMMAND+0x2a>
 65e:	00 00       	nop
	_delay_ms(LCD_instruction_Delay);
	
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(0xF0&(x<<4));
 660:	22 b3       	in	r18, 0x12	; 18
 662:	2f 70       	andi	r18, 0x0F	; 15
 664:	f0 e1       	ldi	r31, 0x10	; 16
 666:	8f 9f       	mul	r24, r31
 668:	c0 01       	movw	r24, r0
 66a:	11 24       	eor	r1, r1
 66c:	82 2b       	or	r24, r18
 66e:	82 bb       	out	0x12, r24	; 18
	clear(LCD_CONTROL_PORT,LCD_RS_PIN);
 670:	ad 98       	cbi	0x15, 5	; 21
	clear(LCD_CONTROL_PORT,LCD_RW_PIN);
 672:	ae 98       	cbi	0x15, 6	; 21
	set(LCD_CONTROL_PORT,LCD_EN_PIN);
 674:	af 9a       	sbi	0x15, 7	; 21
 676:	8b e4       	ldi	r24, 0x4B	; 75
 678:	9d e1       	ldi	r25, 0x1D	; 29
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	f1 f7       	brne	.-4      	; 0x67a <LCD_COMMAND+0x46>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <LCD_COMMAND+0x4c>
 680:	00 00       	nop
	_delay_ms(LCD_instruction_Delay/*=2*/);  //_delay_us(20);
	clear(LCD_CONTROL_PORT,LCD_EN_PIN);
 682:	af 98       	cbi	0x15, 7	; 21
 684:	eb e4       	ldi	r30, 0x4B	; 75
 686:	fd e1       	ldi	r31, 0x1D	; 29
 688:	31 97       	sbiw	r30, 0x01	; 1
 68a:	f1 f7       	brne	.-4      	; 0x688 <LCD_COMMAND+0x54>
 68c:	00 c0       	rjmp	.+0      	; 0x68e <LCD_COMMAND+0x5a>
 68e:	00 00       	nop
 690:	08 95       	ret

00000692 <LCD_int>:
}

void LCD_int()
{
	//SETTING LCD PINS AS OUTPUT
	set(LCD_CONTROL_PORT_STATE,LCD_RS_PIN);
 692:	a5 9a       	sbi	0x14, 5	; 20
	set(LCD_CONTROL_PORT_STATE,LCD_RW_PIN);
 694:	a6 9a       	sbi	0x14, 6	; 20
	set(LCD_CONTROL_PORT_STATE,LCD_EN_PIN);
 696:	a7 9a       	sbi	0x14, 7	; 20
	set(LCD_DATA_PORT_STATE,LCD_D4_PIN);
 698:	8c 9a       	sbi	0x11, 4	; 17
	set(LCD_DATA_PORT_STATE,LCD_D5_PIN);
 69a:	8d 9a       	sbi	0x11, 5	; 17
	set(LCD_DATA_PORT_STATE,LCD_D6_PIN);
 69c:	8e 9a       	sbi	0x11, 6	; 17
	set(LCD_DATA_PORT_STATE,LCD_D7_PIN);
 69e:	8f 9a       	sbi	0x11, 7	; 17
 6a0:	87 ea       	ldi	r24, 0xA7	; 167
 6a2:	91 e6       	ldi	r25, 0x61	; 97
 6a4:	01 97       	sbiw	r24, 0x01	; 1
 6a6:	f1 f7       	brne	.-4      	; 0x6a4 <LCD_int+0x12>
 6a8:	00 c0       	rjmp	.+0      	; 0x6aa <LCD_int+0x18>
 6aa:	00 00       	nop

	_delay_ms(LCD_PowerOn_Delay);
	LCD_COMMAND(send_4bit_intitializsion);		//4-bit bus mode
 6ac:	82 e0       	ldi	r24, 0x02	; 2
 6ae:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_COMMAND>
 6b2:	8b e4       	ldi	r24, 0x4B	; 75
 6b4:	9d e1       	ldi	r25, 0x1D	; 29
 6b6:	01 97       	sbiw	r24, 0x01	; 1
 6b8:	f1 f7       	brne	.-4      	; 0x6b6 <LCD_int+0x24>
 6ba:	00 c0       	rjmp	.+0      	; 0x6bc <LCD_int+0x2a>
 6bc:	00 00       	nop
	_delay_ms(LCD_instruction_Delay);
	LCD_COMMAND(internal_2lines_4bit);			//function set
 6be:	88 e2       	ldi	r24, 0x28	; 40
 6c0:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_COMMAND>
 6c4:	8b e4       	ldi	r24, 0x4B	; 75
 6c6:	9d e1       	ldi	r25, 0x1D	; 29
 6c8:	01 97       	sbiw	r24, 0x01	; 1
 6ca:	f1 f7       	brne	.-4      	; 0x6c8 <LCD_int+0x36>
 6cc:	00 c0       	rjmp	.+0      	; 0x6ce <LCD_int+0x3c>
 6ce:	00 00       	nop
	_delay_ms(LCD_instruction_Delay);
	LCD_COMMAND(home_position);					//return home
 6d0:	80 e8       	ldi	r24, 0x80	; 128
 6d2:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_COMMAND>
 6d6:	8b e4       	ldi	r24, 0x4B	; 75
 6d8:	9d e1       	ldi	r25, 0x1D	; 29
 6da:	01 97       	sbiw	r24, 0x01	; 1
 6dc:	f1 f7       	brne	.-4      	; 0x6da <LCD_int+0x48>
 6de:	00 c0       	rjmp	.+0      	; 0x6e0 <LCD_int+0x4e>
 6e0:	00 00       	nop
	_delay_ms(LCD_instruction_Delay);
	LCD_COMMAND(disply_on_corsor_off);			//display on/off control
 6e2:	8c e0       	ldi	r24, 0x0C	; 12
 6e4:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_COMMAND>
 6e8:	8b e4       	ldi	r24, 0x4B	; 75
 6ea:	9d e1       	ldi	r25, 0x1D	; 29
 6ec:	01 97       	sbiw	r24, 0x01	; 1
 6ee:	f1 f7       	brne	.-4      	; 0x6ec <LCD_int+0x5a>
 6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <LCD_int+0x60>
 6f2:	00 00       	nop
	_delay_ms(LCD_instruction_Delay);
	LCD_COMMAND(clear_disply);					//clear display
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_COMMAND>
 6fa:	8b e4       	ldi	r24, 0x4B	; 75
 6fc:	9d e1       	ldi	r25, 0x1D	; 29
 6fe:	01 97       	sbiw	r24, 0x01	; 1
 700:	f1 f7       	brne	.-4      	; 0x6fe <LCD_int+0x6c>
 702:	00 c0       	rjmp	.+0      	; 0x704 <LCD_int+0x72>
 704:	00 00       	nop
	_delay_ms(LCD_instruction_Delay);
	LCD_COMMAND(auto_increment);				//entry mode
 706:	86 e0       	ldi	r24, 0x06	; 6
 708:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_COMMAND>
 70c:	8b e4       	ldi	r24, 0x4B	; 75
 70e:	9d e1       	ldi	r25, 0x1D	; 29
 710:	01 97       	sbiw	r24, 0x01	; 1
 712:	f1 f7       	brne	.-4      	; 0x710 <LCD_int+0x7e>
 714:	00 c0       	rjmp	.+0      	; 0x716 <LCD_int+0x84>
 716:	00 00       	nop
 718:	08 95       	ret

0000071a <LCD_char>:
	_delay_ms(LCD_instruction_Delay);
}

void LCD_char(char x)
{
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(0xF0&x);
 71a:	92 b3       	in	r25, 0x12	; 18
 71c:	9f 70       	andi	r25, 0x0F	; 15
 71e:	28 2f       	mov	r18, r24
 720:	20 7f       	andi	r18, 0xF0	; 240
 722:	92 2b       	or	r25, r18
 724:	92 bb       	out	0x12, r25	; 18
	set(LCD_CONTROL_PORT,LCD_RS_PIN);
 726:	ad 9a       	sbi	0x15, 5	; 21
	clear(LCD_CONTROL_PORT,LCD_RW_PIN);
 728:	ae 98       	cbi	0x15, 6	; 21
	set(LCD_CONTROL_PORT,LCD_EN_PIN);
 72a:	af 9a       	sbi	0x15, 7	; 21
 72c:	eb e4       	ldi	r30, 0x4B	; 75
 72e:	fd e1       	ldi	r31, 0x1D	; 29
 730:	31 97       	sbiw	r30, 0x01	; 1
 732:	f1 f7       	brne	.-4      	; 0x730 <LCD_char+0x16>
 734:	00 c0       	rjmp	.+0      	; 0x736 <LCD_char+0x1c>
 736:	00 00       	nop
	_delay_ms(LCD_instruction_Delay/*=2*/);  //_delay_us(200);
	clear(LCD_CONTROL_PORT,LCD_EN_PIN);
 738:	af 98       	cbi	0x15, 7	; 21
 73a:	eb e4       	ldi	r30, 0x4B	; 75
 73c:	fd e1       	ldi	r31, 0x1D	; 29
 73e:	31 97       	sbiw	r30, 0x01	; 1
 740:	f1 f7       	brne	.-4      	; 0x73e <LCD_char+0x24>
 742:	00 c0       	rjmp	.+0      	; 0x744 <LCD_char+0x2a>
 744:	00 00       	nop
	_delay_ms(LCD_instruction_Delay);
	
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(0xF0&(x<<4));
 746:	22 b3       	in	r18, 0x12	; 18
 748:	2f 70       	andi	r18, 0x0F	; 15
 74a:	f0 e1       	ldi	r31, 0x10	; 16
 74c:	8f 9f       	mul	r24, r31
 74e:	c0 01       	movw	r24, r0
 750:	11 24       	eor	r1, r1
 752:	82 2b       	or	r24, r18
 754:	82 bb       	out	0x12, r24	; 18
	set(LCD_CONTROL_PORT,LCD_RS_PIN);
 756:	ad 9a       	sbi	0x15, 5	; 21
	clear(LCD_CONTROL_PORT,LCD_RW_PIN);
 758:	ae 98       	cbi	0x15, 6	; 21
	set(LCD_CONTROL_PORT,LCD_EN_PIN);
 75a:	af 9a       	sbi	0x15, 7	; 21
 75c:	8b e4       	ldi	r24, 0x4B	; 75
 75e:	9d e1       	ldi	r25, 0x1D	; 29
 760:	01 97       	sbiw	r24, 0x01	; 1
 762:	f1 f7       	brne	.-4      	; 0x760 <LCD_char+0x46>
 764:	00 c0       	rjmp	.+0      	; 0x766 <LCD_char+0x4c>
 766:	00 00       	nop
	_delay_ms(LCD_instruction_Delay/*=2*/);  //_delay_us(200);
	clear(LCD_CONTROL_PORT,LCD_EN_PIN);
 768:	af 98       	cbi	0x15, 7	; 21
 76a:	eb e4       	ldi	r30, 0x4B	; 75
 76c:	fd e1       	ldi	r31, 0x1D	; 29
 76e:	31 97       	sbiw	r30, 0x01	; 1
 770:	f1 f7       	brne	.-4      	; 0x76e <LCD_char+0x54>
 772:	00 c0       	rjmp	.+0      	; 0x774 <LCD_char+0x5a>
 774:	00 00       	nop
 776:	08 95       	ret

00000778 <LCD_String>:
	_delay_ms(LCD_instruction_Delay);
}

void LCD_String (char *str)		/* Send string to LCD function  */
{
 778:	cf 93       	push	r28
 77a:	df 93       	push	r29
 77c:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 77e:	88 81       	ld	r24, Y
 780:	88 23       	and	r24, r24
 782:	31 f0       	breq	.+12     	; 0x790 <LCD_String+0x18>
 784:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_char (str[i]);
 786:	0e 94 8d 03 	call	0x71a	; 0x71a <LCD_char>
}

void LCD_String (char *str)		/* Send string to LCD function  */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 78a:	89 91       	ld	r24, Y+
 78c:	81 11       	cpse	r24, r1
 78e:	fb cf       	rjmp	.-10     	; 0x786 <LCD_String+0xe>
	{
		LCD_char (str[i]);
	}
}
 790:	df 91       	pop	r29
 792:	cf 91       	pop	r28
 794:	08 95       	ret

00000796 <LCD_Clear>:

void LCD_Clear()
{
	LCD_COMMAND (clear_disply);
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_COMMAND>
 79c:	8b e4       	ldi	r24, 0x4B	; 75
 79e:	9d e1       	ldi	r25, 0x1D	; 29
 7a0:	01 97       	sbiw	r24, 0x01	; 1
 7a2:	f1 f7       	brne	.-4      	; 0x7a0 <LCD_Clear+0xa>
 7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <LCD_Clear+0x10>
 7a6:	00 00       	nop
	_delay_ms(LCD_instruction_Delay);
	LCD_COMMAND (home_position);
 7a8:	80 e8       	ldi	r24, 0x80	; 128
 7aa:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_COMMAND>
 7ae:	08 95       	ret

000007b0 <LCD_Show_temp>:
}

void LCD_Show_temp(int x)
{
 7b0:	ef 92       	push	r14
 7b2:	ff 92       	push	r15
 7b4:	0f 93       	push	r16
 7b6:	1f 93       	push	r17
 7b8:	cf 93       	push	r28
 7ba:	df 93       	push	r29
 7bc:	00 d0       	rcall	.+0      	; 0x7be <LCD_Show_temp+0xe>
 7be:	1f 92       	push	r1
 7c0:	cd b7       	in	r28, 0x3d	; 61
 7c2:	de b7       	in	r29, 0x3e	; 62
 7c4:	8c 01       	movw	r16, r24
	LCD_Clear();
 7c6:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_Clear>
	LCD_String("Current Temp");
 7ca:	8e e9       	ldi	r24, 0x9E	; 158
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_String>
	LCD_COMMAND(NextLine);
 7d2:	80 ec       	ldi	r24, 0xC0	; 192
 7d4:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_COMMAND>
	unsigned char ch[3]={' '};
 7d8:	80 e2       	ldi	r24, 0x20	; 32
 7da:	89 83       	std	Y+1, r24	; 0x01
	for(int i=0;i<3;i++)
	{
		ch[i]=' ';
 7dc:	8a 83       	std	Y+2, r24	; 0x02
 7de:	8b 83       	std	Y+3, r24	; 0x03
	}
	itoa(x,ch,10);
 7e0:	4a e0       	ldi	r20, 0x0A	; 10
 7e2:	50 e0       	ldi	r21, 0x00	; 0
 7e4:	be 01       	movw	r22, r28
 7e6:	6f 5f       	subi	r22, 0xFF	; 255
 7e8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ea:	c8 01       	movw	r24, r16
 7ec:	0e 94 cc 06 	call	0xd98	; 0xd98 <itoa>
 7f0:	8e 01       	movw	r16, r28
 7f2:	0f 5f       	subi	r16, 0xFF	; 255
 7f4:	1f 4f       	sbci	r17, 0xFF	; 255
 7f6:	7e 01       	movw	r14, r28
 7f8:	84 e0       	ldi	r24, 0x04	; 4
 7fa:	e8 0e       	add	r14, r24
 7fc:	f1 1c       	adc	r15, r1
	for (int j=0;j<3;j++)
	{
		if (ch[j]<'0'||ch[j]>'9')
 7fe:	f8 01       	movw	r30, r16
 800:	81 91       	ld	r24, Z+
 802:	8f 01       	movw	r16, r30
 804:	90 ed       	ldi	r25, 0xD0	; 208
 806:	98 0f       	add	r25, r24
 808:	9a 30       	cpi	r25, 0x0A	; 10
 80a:	20 f0       	brcs	.+8      	; 0x814 <LCD_Show_temp+0x64>
		LCD_char(' ');
 80c:	80 e2       	ldi	r24, 0x20	; 32
 80e:	0e 94 8d 03 	call	0x71a	; 0x71a <LCD_char>
 812:	02 c0       	rjmp	.+4      	; 0x818 <LCD_Show_temp+0x68>
		else
		LCD_char(ch[j]);
 814:	0e 94 8d 03 	call	0x71a	; 0x71a <LCD_char>
	for(int i=0;i<3;i++)
	{
		ch[i]=' ';
	}
	itoa(x,ch,10);
	for (int j=0;j<3;j++)
 818:	0e 15       	cp	r16, r14
 81a:	1f 05       	cpc	r17, r15
 81c:	81 f7       	brne	.-32     	; 0x7fe <LCD_Show_temp+0x4e>
		if (ch[j]<'0'||ch[j]>'9')
		LCD_char(' ');
		else
		LCD_char(ch[j]);
	}
	LCD_String("'C");
 81e:	8b ea       	ldi	r24, 0xAB	; 171
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_String>
}
 826:	0f 90       	pop	r0
 828:	0f 90       	pop	r0
 82a:	0f 90       	pop	r0
 82c:	df 91       	pop	r29
 82e:	cf 91       	pop	r28
 830:	1f 91       	pop	r17
 832:	0f 91       	pop	r16
 834:	ff 90       	pop	r15
 836:	ef 90       	pop	r14
 838:	08 95       	ret

0000083a <LCD_off>:

void LCD_off()
{
	LCD_Clear();
 83a:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_Clear>
	LCD_String("turning off");	
 83e:	8e ea       	ldi	r24, 0xAE	; 174
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_String>
	LCD_COMMAND(NextLine);
 846:	80 ec       	ldi	r24, 0xC0	; 192
 848:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_COMMAND>
	LCD_String("    :(");
 84c:	8a eb       	ldi	r24, 0xBA	; 186
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_String>
 854:	87 ea       	ldi	r24, 0xA7	; 167
 856:	91 e6       	ldi	r25, 0x61	; 97
 858:	01 97       	sbiw	r24, 0x01	; 1
 85a:	f1 f7       	brne	.-4      	; 0x858 <LCD_off+0x1e>
 85c:	00 c0       	rjmp	.+0      	; 0x85e <LCD_off+0x24>
 85e:	00 00       	nop
	_delay_ms(100);
	LCD_Clear();
 860:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_Clear>
	LCD_COMMAND(disply_on_corsor_off);
 864:	8c e0       	ldi	r24, 0x0C	; 12
 866:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_COMMAND>
	LCD_CONTROL_PORT=0x00;
 86a:	15 ba       	out	0x15, r1	; 21
 86c:	08 95       	ret

0000086e <LCD_Show_set_temp>:
}

void LCD_Show_set_temp(int x)
{
 86e:	ef 92       	push	r14
 870:	ff 92       	push	r15
 872:	0f 93       	push	r16
 874:	1f 93       	push	r17
 876:	cf 93       	push	r28
 878:	df 93       	push	r29
 87a:	00 d0       	rcall	.+0      	; 0x87c <LCD_Show_set_temp+0xe>
 87c:	1f 92       	push	r1
 87e:	cd b7       	in	r28, 0x3d	; 61
 880:	de b7       	in	r29, 0x3e	; 62
 882:	8c 01       	movw	r16, r24
	LCD_Clear();
 884:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_Clear>
	LCD_String("Set Temp");
 888:	81 ec       	ldi	r24, 0xC1	; 193
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_String>
	LCD_COMMAND(NextLine);
 890:	80 ec       	ldi	r24, 0xC0	; 192
 892:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_COMMAND>
	unsigned char ch[3]={' '};
 896:	80 e2       	ldi	r24, 0x20	; 32
 898:	89 83       	std	Y+1, r24	; 0x01
	for(int i=0;i<3;i++)
	{
		ch[i]=' ';
 89a:	8a 83       	std	Y+2, r24	; 0x02
 89c:	8b 83       	std	Y+3, r24	; 0x03
	}
	itoa(x,ch,10);
 89e:	4a e0       	ldi	r20, 0x0A	; 10
 8a0:	50 e0       	ldi	r21, 0x00	; 0
 8a2:	be 01       	movw	r22, r28
 8a4:	6f 5f       	subi	r22, 0xFF	; 255
 8a6:	7f 4f       	sbci	r23, 0xFF	; 255
 8a8:	c8 01       	movw	r24, r16
 8aa:	0e 94 cc 06 	call	0xd98	; 0xd98 <itoa>
 8ae:	8e 01       	movw	r16, r28
 8b0:	0f 5f       	subi	r16, 0xFF	; 255
 8b2:	1f 4f       	sbci	r17, 0xFF	; 255
 8b4:	7e 01       	movw	r14, r28
 8b6:	84 e0       	ldi	r24, 0x04	; 4
 8b8:	e8 0e       	add	r14, r24
 8ba:	f1 1c       	adc	r15, r1
	for (int j=0;j<3;j++)
	{
		if (ch[j]<'0'||ch[j]>'9')
 8bc:	f8 01       	movw	r30, r16
 8be:	81 91       	ld	r24, Z+
 8c0:	8f 01       	movw	r16, r30
 8c2:	90 ed       	ldi	r25, 0xD0	; 208
 8c4:	98 0f       	add	r25, r24
 8c6:	9a 30       	cpi	r25, 0x0A	; 10
 8c8:	20 f0       	brcs	.+8      	; 0x8d2 <LCD_Show_set_temp+0x64>
		LCD_char(' ');
 8ca:	80 e2       	ldi	r24, 0x20	; 32
 8cc:	0e 94 8d 03 	call	0x71a	; 0x71a <LCD_char>
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <LCD_Show_set_temp+0x68>
		else
		LCD_char(ch[j]);
 8d2:	0e 94 8d 03 	call	0x71a	; 0x71a <LCD_char>
	for(int i=0;i<3;i++)
	{
		ch[i]=' ';
	}
	itoa(x,ch,10);
	for (int j=0;j<3;j++)
 8d6:	0e 15       	cp	r16, r14
 8d8:	1f 05       	cpc	r17, r15
 8da:	81 f7       	brne	.-32     	; 0x8bc <LCD_Show_set_temp+0x4e>
		if (ch[j]<'0'||ch[j]>'9')
		LCD_char(' ');
		else
		LCD_char(ch[j]);
	}
	LCD_String("'C");
 8dc:	8b ea       	ldi	r24, 0xAB	; 171
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e 94 bc 03 	call	0x778	; 0x778 <LCD_String>
 8e4:	0f 90       	pop	r0
 8e6:	0f 90       	pop	r0
 8e8:	0f 90       	pop	r0
 8ea:	df 91       	pop	r29
 8ec:	cf 91       	pop	r28
 8ee:	1f 91       	pop	r17
 8f0:	0f 91       	pop	r16
 8f2:	ff 90       	pop	r15
 8f4:	ef 90       	pop	r14
 8f6:	08 95       	ret

000008f8 <LED_init>:
 8f8:	d0 9a       	sbi	0x1a, 0	; 26
 8fa:	08 95       	ret

000008fc <LED_COOLING>:
 8fc:	d8 9a       	sbi	0x1b, 0	; 27
 8fe:	08 95       	ret

00000900 <LED_HEATING>:
 900:	9b b3       	in	r25, 0x1b	; 27
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	89 27       	eor	r24, r25
 906:	8b bb       	out	0x1b, r24	; 27
 908:	08 95       	ret

0000090a <LED_off>:
 90a:	d8 98       	cbi	0x1b, 0	; 27
 90c:	08 95       	ret

0000090e <ADC_initi>:
 90e:	d1 98       	cbi	0x1a, 1	; 26
 910:	97 b1       	in	r25, 0x07	; 7
 912:	89 2b       	or	r24, r25
 914:	87 b9       	out	0x07, r24	; 7
 916:	3e 9a       	sbi	0x07, 6	; 7
 918:	37 9a       	sbi	0x06, 7	; 6
 91a:	30 9a       	sbi	0x06, 0	; 6
 91c:	31 9a       	sbi	0x06, 1	; 6
 91e:	32 9a       	sbi	0x06, 2	; 6
 920:	08 95       	ret

00000922 <ADC_read>:
 922:	36 9a       	sbi	0x06, 6	; 6
 924:	34 9b       	sbis	0x06, 4	; 6
 926:	fe cf       	rjmp	.-4      	; 0x924 <ADC_read+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 928:	83 e0       	ldi	r24, 0x03	; 3
 92a:	8a 95       	dec	r24
 92c:	f1 f7       	brne	.-4      	; 0x92a <ADC_read+0x8>
 92e:	00 00       	nop
 930:	24 b1       	in	r18, 0x04	; 4
 932:	85 b1       	in	r24, 0x05	; 5
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	98 2f       	mov	r25, r24
 938:	88 27       	eor	r24, r24
 93a:	82 0f       	add	r24, r18
 93c:	91 1d       	adc	r25, r1
 93e:	08 95       	ret

00000940 <avg_tempreture>:
 940:	1f 93       	push	r17
 942:	cf 93       	push	r28
 944:	df 93       	push	r29
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	0e 94 87 04 	call	0x90e	; 0x90e <ADC_initi>
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	0e 94 91 04 	call	0x922	; 0x922 <ADC_read>
 956:	bc 01       	movw	r22, r24
 958:	80 e0       	ldi	r24, 0x00	; 0
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	0e 94 a9 05 	call	0xb52	; 0xb52 <__floatunsisf>
 960:	20 e0       	ldi	r18, 0x00	; 0
 962:	30 e0       	ldi	r19, 0x00	; 0
 964:	40 ea       	ldi	r20, 0xA0	; 160
 966:	50 e4       	ldi	r21, 0x40	; 64
 968:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__mulsf3>
 96c:	20 e0       	ldi	r18, 0x00	; 0
 96e:	30 e0       	ldi	r19, 0x00	; 0
 970:	40 e8       	ldi	r20, 0x80	; 128
 972:	5a e3       	ldi	r21, 0x3A	; 58
 974:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__mulsf3>
 978:	20 e0       	ldi	r18, 0x00	; 0
 97a:	30 e0       	ldi	r19, 0x00	; 0
 97c:	48 ec       	ldi	r20, 0xC8	; 200
 97e:	52 e4       	ldi	r21, 0x42	; 66
 980:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__mulsf3>
 984:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fixunssfsi>
 988:	1a e0       	ldi	r17, 0x0A	; 10
 98a:	c0 e0       	ldi	r28, 0x00	; 0
 98c:	d0 e0       	ldi	r29, 0x00	; 0
 98e:	c6 0f       	add	r28, r22
 990:	d7 1f       	adc	r29, r23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 992:	87 ea       	ldi	r24, 0xA7	; 167
 994:	91 e6       	ldi	r25, 0x61	; 97
 996:	01 97       	sbiw	r24, 0x01	; 1
 998:	f1 f7       	brne	.-4      	; 0x996 <avg_tempreture+0x56>
 99a:	00 c0       	rjmp	.+0      	; 0x99c <avg_tempreture+0x5c>
 99c:	00 00       	nop
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	0e 94 91 04 	call	0x922	; 0x922 <ADC_read>
 9a6:	bc 01       	movw	r22, r24
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	0e 94 a9 05 	call	0xb52	; 0xb52 <__floatunsisf>
 9b0:	20 e0       	ldi	r18, 0x00	; 0
 9b2:	30 e0       	ldi	r19, 0x00	; 0
 9b4:	40 ea       	ldi	r20, 0xA0	; 160
 9b6:	50 e4       	ldi	r21, 0x40	; 64
 9b8:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__mulsf3>
 9bc:	20 e0       	ldi	r18, 0x00	; 0
 9be:	30 e0       	ldi	r19, 0x00	; 0
 9c0:	40 e8       	ldi	r20, 0x80	; 128
 9c2:	5a e3       	ldi	r21, 0x3A	; 58
 9c4:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__mulsf3>
 9c8:	20 e0       	ldi	r18, 0x00	; 0
 9ca:	30 e0       	ldi	r19, 0x00	; 0
 9cc:	48 ec       	ldi	r20, 0xC8	; 200
 9ce:	52 e4       	ldi	r21, 0x42	; 66
 9d0:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__mulsf3>
 9d4:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fixunssfsi>
 9d8:	11 50       	subi	r17, 0x01	; 1
 9da:	c9 f6       	brne	.-78     	; 0x98e <avg_tempreture+0x4e>
 9dc:	ce 01       	movw	r24, r28
 9de:	6a e0       	ldi	r22, 0x0A	; 10
 9e0:	70 e0       	ldi	r23, 0x00	; 0
 9e2:	0e 94 a4 06 	call	0xd48	; 0xd48 <__divmodhi4>
 9e6:	cb 01       	movw	r24, r22
 9e8:	df 91       	pop	r29
 9ea:	cf 91       	pop	r28
 9ec:	1f 91       	pop	r17
 9ee:	08 95       	ret

000009f0 <main>:
#include "APP.h"


int main(void)
{
	APP_init();
 9f0:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	APP_start();
 9f4:	0e 94 31 02 	call	0x462	; 0x462 <APP_start>
}
 9f8:	80 e0       	ldi	r24, 0x00	; 0
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	08 95       	ret

000009fe <sev_seg_init>:
 9fe:	bb 9a       	sbi	0x17, 3	; 23
 a00:	08 95       	ret

00000a02 <sev_seg_enable>:
 a02:	c3 9a       	sbi	0x18, 3	; 24
 a04:	08 95       	ret

00000a06 <sev_seg_disable>:
 a06:	c3 98       	cbi	0x18, 3	; 24
 a08:	08 95       	ret

00000a0a <sev_seg_1_displaynumper>:
 a0a:	dc 01       	movw	r26, r24
 a0c:	8d ef       	ldi	r24, 0xFD	; 253
 a0e:	8b bb       	out	0x1b, r24	; 27
 a10:	aa 30       	cpi	r26, 0x0A	; 10
 a12:	b1 05       	cpc	r27, r1
 a14:	9c f5       	brge	.+102    	; 0xa7c <sev_seg_1_displaynumper+0x72>
 a16:	44 e0       	ldi	r20, 0x04	; 4
 a18:	50 e0       	ldi	r21, 0x00	; 0
 a1a:	e1 e0       	ldi	r30, 0x01	; 1
 a1c:	f0 e0       	ldi	r31, 0x00	; 0
 a1e:	ba 01       	movw	r22, r20
 a20:	64 50       	subi	r22, 0x04	; 4
 a22:	71 09       	sbc	r23, r1
 a24:	9f 01       	movw	r18, r30
 a26:	06 2e       	mov	r0, r22
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <sev_seg_1_displaynumper+0x24>
 a2a:	22 0f       	add	r18, r18
 a2c:	33 1f       	adc	r19, r19
 a2e:	0a 94       	dec	r0
 a30:	e2 f7       	brpl	.-8      	; 0xa2a <sev_seg_1_displaynumper+0x20>
 a32:	2a 23       	and	r18, r26
 a34:	3b 23       	and	r19, r27
 a36:	02 c0       	rjmp	.+4      	; 0xa3c <sev_seg_1_displaynumper+0x32>
 a38:	35 95       	asr	r19
 a3a:	27 95       	ror	r18
 a3c:	6a 95       	dec	r22
 a3e:	e2 f7       	brpl	.-8      	; 0xa38 <sev_seg_1_displaynumper+0x2e>
 a40:	23 2b       	or	r18, r19
 a42:	59 f0       	breq	.+22     	; 0xa5a <sev_seg_1_displaynumper+0x50>
 a44:	2b b3       	in	r18, 0x1b	; 27
 a46:	cf 01       	movw	r24, r30
 a48:	04 2e       	mov	r0, r20
 a4a:	02 c0       	rjmp	.+4      	; 0xa50 <sev_seg_1_displaynumper+0x46>
 a4c:	88 0f       	add	r24, r24
 a4e:	99 1f       	adc	r25, r25
 a50:	0a 94       	dec	r0
 a52:	e2 f7       	brpl	.-8      	; 0xa4c <sev_seg_1_displaynumper+0x42>
 a54:	82 2b       	or	r24, r18
 a56:	8b bb       	out	0x1b, r24	; 27
 a58:	0c c0       	rjmp	.+24     	; 0xa72 <sev_seg_1_displaynumper+0x68>
 a5a:	2b b3       	in	r18, 0x1b	; 27
 a5c:	bf 01       	movw	r22, r30
 a5e:	04 2e       	mov	r0, r20
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <sev_seg_1_displaynumper+0x5c>
 a62:	66 0f       	add	r22, r22
 a64:	77 1f       	adc	r23, r23
 a66:	0a 94       	dec	r0
 a68:	e2 f7       	brpl	.-8      	; 0xa62 <sev_seg_1_displaynumper+0x58>
 a6a:	96 2f       	mov	r25, r22
 a6c:	90 95       	com	r25
 a6e:	92 23       	and	r25, r18
 a70:	9b bb       	out	0x1b, r25	; 27
 a72:	4f 5f       	subi	r20, 0xFF	; 255
 a74:	5f 4f       	sbci	r21, 0xFF	; 255
 a76:	48 30       	cpi	r20, 0x08	; 8
 a78:	51 05       	cpc	r21, r1
 a7a:	89 f6       	brne	.-94     	; 0xa1e <sev_seg_1_displaynumper+0x14>
 a7c:	08 95       	ret

00000a7e <sev_seg_2_displaynumper>:
 a7e:	dc 01       	movw	r26, r24
 a80:	c4 9a       	sbi	0x18, 4	; 24
 a82:	c5 9a       	sbi	0x18, 5	; 24
 a84:	c6 9a       	sbi	0x18, 6	; 24
 a86:	c7 9a       	sbi	0x18, 7	; 24
 a88:	0a 97       	sbiw	r24, 0x0a	; 10
 a8a:	9c f5       	brge	.+102    	; 0xaf2 <sev_seg_2_displaynumper+0x74>
 a8c:	44 e0       	ldi	r20, 0x04	; 4
 a8e:	50 e0       	ldi	r21, 0x00	; 0
 a90:	e1 e0       	ldi	r30, 0x01	; 1
 a92:	f0 e0       	ldi	r31, 0x00	; 0
 a94:	ba 01       	movw	r22, r20
 a96:	64 50       	subi	r22, 0x04	; 4
 a98:	71 09       	sbc	r23, r1
 a9a:	9f 01       	movw	r18, r30
 a9c:	06 2e       	mov	r0, r22
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <sev_seg_2_displaynumper+0x26>
 aa0:	22 0f       	add	r18, r18
 aa2:	33 1f       	adc	r19, r19
 aa4:	0a 94       	dec	r0
 aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <sev_seg_2_displaynumper+0x22>
 aa8:	2a 23       	and	r18, r26
 aaa:	3b 23       	and	r19, r27
 aac:	02 c0       	rjmp	.+4      	; 0xab2 <sev_seg_2_displaynumper+0x34>
 aae:	35 95       	asr	r19
 ab0:	27 95       	ror	r18
 ab2:	6a 95       	dec	r22
 ab4:	e2 f7       	brpl	.-8      	; 0xaae <sev_seg_2_displaynumper+0x30>
 ab6:	23 2b       	or	r18, r19
 ab8:	59 f0       	breq	.+22     	; 0xad0 <sev_seg_2_displaynumper+0x52>
 aba:	28 b3       	in	r18, 0x18	; 24
 abc:	cf 01       	movw	r24, r30
 abe:	04 2e       	mov	r0, r20
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <sev_seg_2_displaynumper+0x48>
 ac2:	88 0f       	add	r24, r24
 ac4:	99 1f       	adc	r25, r25
 ac6:	0a 94       	dec	r0
 ac8:	e2 f7       	brpl	.-8      	; 0xac2 <sev_seg_2_displaynumper+0x44>
 aca:	82 2b       	or	r24, r18
 acc:	88 bb       	out	0x18, r24	; 24
 ace:	0c c0       	rjmp	.+24     	; 0xae8 <sev_seg_2_displaynumper+0x6a>
 ad0:	28 b3       	in	r18, 0x18	; 24
 ad2:	bf 01       	movw	r22, r30
 ad4:	04 2e       	mov	r0, r20
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <sev_seg_2_displaynumper+0x5e>
 ad8:	66 0f       	add	r22, r22
 ada:	77 1f       	adc	r23, r23
 adc:	0a 94       	dec	r0
 ade:	e2 f7       	brpl	.-8      	; 0xad8 <sev_seg_2_displaynumper+0x5a>
 ae0:	96 2f       	mov	r25, r22
 ae2:	90 95       	com	r25
 ae4:	92 23       	and	r25, r18
 ae6:	98 bb       	out	0x18, r25	; 24
 ae8:	4f 5f       	subi	r20, 0xFF	; 255
 aea:	5f 4f       	sbci	r21, 0xFF	; 255
 aec:	48 30       	cpi	r20, 0x08	; 8
 aee:	51 05       	cpc	r21, r1
 af0:	89 f6       	brne	.-94     	; 0xa94 <sev_seg_2_displaynumper+0x16>
 af2:	08 95       	ret

00000af4 <__fixunssfsi>:
 af4:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fp_splitA>
 af8:	88 f0       	brcs	.+34     	; 0xb1c <__fixunssfsi+0x28>
 afa:	9f 57       	subi	r25, 0x7F	; 127
 afc:	98 f0       	brcs	.+38     	; 0xb24 <__fixunssfsi+0x30>
 afe:	b9 2f       	mov	r27, r25
 b00:	99 27       	eor	r25, r25
 b02:	b7 51       	subi	r27, 0x17	; 23
 b04:	b0 f0       	brcs	.+44     	; 0xb32 <__fixunssfsi+0x3e>
 b06:	e1 f0       	breq	.+56     	; 0xb40 <__fixunssfsi+0x4c>
 b08:	66 0f       	add	r22, r22
 b0a:	77 1f       	adc	r23, r23
 b0c:	88 1f       	adc	r24, r24
 b0e:	99 1f       	adc	r25, r25
 b10:	1a f0       	brmi	.+6      	; 0xb18 <__fixunssfsi+0x24>
 b12:	ba 95       	dec	r27
 b14:	c9 f7       	brne	.-14     	; 0xb08 <__fixunssfsi+0x14>
 b16:	14 c0       	rjmp	.+40     	; 0xb40 <__fixunssfsi+0x4c>
 b18:	b1 30       	cpi	r27, 0x01	; 1
 b1a:	91 f0       	breq	.+36     	; 0xb40 <__fixunssfsi+0x4c>
 b1c:	0e 94 08 06 	call	0xc10	; 0xc10 <__fp_zero>
 b20:	b1 e0       	ldi	r27, 0x01	; 1
 b22:	08 95       	ret
 b24:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__fp_zero>
 b28:	67 2f       	mov	r22, r23
 b2a:	78 2f       	mov	r23, r24
 b2c:	88 27       	eor	r24, r24
 b2e:	b8 5f       	subi	r27, 0xF8	; 248
 b30:	39 f0       	breq	.+14     	; 0xb40 <__fixunssfsi+0x4c>
 b32:	b9 3f       	cpi	r27, 0xF9	; 249
 b34:	cc f3       	brlt	.-14     	; 0xb28 <__fixunssfsi+0x34>
 b36:	86 95       	lsr	r24
 b38:	77 95       	ror	r23
 b3a:	67 95       	ror	r22
 b3c:	b3 95       	inc	r27
 b3e:	d9 f7       	brne	.-10     	; 0xb36 <__fixunssfsi+0x42>
 b40:	3e f4       	brtc	.+14     	; 0xb50 <__fixunssfsi+0x5c>
 b42:	90 95       	com	r25
 b44:	80 95       	com	r24
 b46:	70 95       	com	r23
 b48:	61 95       	neg	r22
 b4a:	7f 4f       	sbci	r23, 0xFF	; 255
 b4c:	8f 4f       	sbci	r24, 0xFF	; 255
 b4e:	9f 4f       	sbci	r25, 0xFF	; 255
 b50:	08 95       	ret

00000b52 <__floatunsisf>:
 b52:	e8 94       	clt
 b54:	09 c0       	rjmp	.+18     	; 0xb68 <__floatsisf+0x12>

00000b56 <__floatsisf>:
 b56:	97 fb       	bst	r25, 7
 b58:	3e f4       	brtc	.+14     	; 0xb68 <__floatsisf+0x12>
 b5a:	90 95       	com	r25
 b5c:	80 95       	com	r24
 b5e:	70 95       	com	r23
 b60:	61 95       	neg	r22
 b62:	7f 4f       	sbci	r23, 0xFF	; 255
 b64:	8f 4f       	sbci	r24, 0xFF	; 255
 b66:	9f 4f       	sbci	r25, 0xFF	; 255
 b68:	99 23       	and	r25, r25
 b6a:	a9 f0       	breq	.+42     	; 0xb96 <__floatsisf+0x40>
 b6c:	f9 2f       	mov	r31, r25
 b6e:	96 e9       	ldi	r25, 0x96	; 150
 b70:	bb 27       	eor	r27, r27
 b72:	93 95       	inc	r25
 b74:	f6 95       	lsr	r31
 b76:	87 95       	ror	r24
 b78:	77 95       	ror	r23
 b7a:	67 95       	ror	r22
 b7c:	b7 95       	ror	r27
 b7e:	f1 11       	cpse	r31, r1
 b80:	f8 cf       	rjmp	.-16     	; 0xb72 <__floatsisf+0x1c>
 b82:	fa f4       	brpl	.+62     	; 0xbc2 <__floatsisf+0x6c>
 b84:	bb 0f       	add	r27, r27
 b86:	11 f4       	brne	.+4      	; 0xb8c <__floatsisf+0x36>
 b88:	60 ff       	sbrs	r22, 0
 b8a:	1b c0       	rjmp	.+54     	; 0xbc2 <__floatsisf+0x6c>
 b8c:	6f 5f       	subi	r22, 0xFF	; 255
 b8e:	7f 4f       	sbci	r23, 0xFF	; 255
 b90:	8f 4f       	sbci	r24, 0xFF	; 255
 b92:	9f 4f       	sbci	r25, 0xFF	; 255
 b94:	16 c0       	rjmp	.+44     	; 0xbc2 <__floatsisf+0x6c>
 b96:	88 23       	and	r24, r24
 b98:	11 f0       	breq	.+4      	; 0xb9e <__floatsisf+0x48>
 b9a:	96 e9       	ldi	r25, 0x96	; 150
 b9c:	11 c0       	rjmp	.+34     	; 0xbc0 <__floatsisf+0x6a>
 b9e:	77 23       	and	r23, r23
 ba0:	21 f0       	breq	.+8      	; 0xbaa <__floatsisf+0x54>
 ba2:	9e e8       	ldi	r25, 0x8E	; 142
 ba4:	87 2f       	mov	r24, r23
 ba6:	76 2f       	mov	r23, r22
 ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <__floatsisf+0x5e>
 baa:	66 23       	and	r22, r22
 bac:	71 f0       	breq	.+28     	; 0xbca <__floatsisf+0x74>
 bae:	96 e8       	ldi	r25, 0x86	; 134
 bb0:	86 2f       	mov	r24, r22
 bb2:	70 e0       	ldi	r23, 0x00	; 0
 bb4:	60 e0       	ldi	r22, 0x00	; 0
 bb6:	2a f0       	brmi	.+10     	; 0xbc2 <__floatsisf+0x6c>
 bb8:	9a 95       	dec	r25
 bba:	66 0f       	add	r22, r22
 bbc:	77 1f       	adc	r23, r23
 bbe:	88 1f       	adc	r24, r24
 bc0:	da f7       	brpl	.-10     	; 0xbb8 <__floatsisf+0x62>
 bc2:	88 0f       	add	r24, r24
 bc4:	96 95       	lsr	r25
 bc6:	87 95       	ror	r24
 bc8:	97 f9       	bld	r25, 7
 bca:	08 95       	ret

00000bcc <__fp_split3>:
 bcc:	57 fd       	sbrc	r21, 7
 bce:	90 58       	subi	r25, 0x80	; 128
 bd0:	44 0f       	add	r20, r20
 bd2:	55 1f       	adc	r21, r21
 bd4:	59 f0       	breq	.+22     	; 0xbec <__fp_splitA+0x10>
 bd6:	5f 3f       	cpi	r21, 0xFF	; 255
 bd8:	71 f0       	breq	.+28     	; 0xbf6 <__fp_splitA+0x1a>
 bda:	47 95       	ror	r20

00000bdc <__fp_splitA>:
 bdc:	88 0f       	add	r24, r24
 bde:	97 fb       	bst	r25, 7
 be0:	99 1f       	adc	r25, r25
 be2:	61 f0       	breq	.+24     	; 0xbfc <__fp_splitA+0x20>
 be4:	9f 3f       	cpi	r25, 0xFF	; 255
 be6:	79 f0       	breq	.+30     	; 0xc06 <__fp_splitA+0x2a>
 be8:	87 95       	ror	r24
 bea:	08 95       	ret
 bec:	12 16       	cp	r1, r18
 bee:	13 06       	cpc	r1, r19
 bf0:	14 06       	cpc	r1, r20
 bf2:	55 1f       	adc	r21, r21
 bf4:	f2 cf       	rjmp	.-28     	; 0xbda <__fp_split3+0xe>
 bf6:	46 95       	lsr	r20
 bf8:	f1 df       	rcall	.-30     	; 0xbdc <__fp_splitA>
 bfa:	08 c0       	rjmp	.+16     	; 0xc0c <__fp_splitA+0x30>
 bfc:	16 16       	cp	r1, r22
 bfe:	17 06       	cpc	r1, r23
 c00:	18 06       	cpc	r1, r24
 c02:	99 1f       	adc	r25, r25
 c04:	f1 cf       	rjmp	.-30     	; 0xbe8 <__fp_splitA+0xc>
 c06:	86 95       	lsr	r24
 c08:	71 05       	cpc	r23, r1
 c0a:	61 05       	cpc	r22, r1
 c0c:	08 94       	sec
 c0e:	08 95       	ret

00000c10 <__fp_zero>:
 c10:	e8 94       	clt

00000c12 <__fp_szero>:
 c12:	bb 27       	eor	r27, r27
 c14:	66 27       	eor	r22, r22
 c16:	77 27       	eor	r23, r23
 c18:	cb 01       	movw	r24, r22
 c1a:	97 f9       	bld	r25, 7
 c1c:	08 95       	ret

00000c1e <__mulsf3>:
 c1e:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3x>
 c22:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_round>
 c26:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fp_pscA>
 c2a:	38 f0       	brcs	.+14     	; 0xc3a <__mulsf3+0x1c>
 c2c:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fp_pscB>
 c30:	20 f0       	brcs	.+8      	; 0xc3a <__mulsf3+0x1c>
 c32:	95 23       	and	r25, r21
 c34:	11 f0       	breq	.+4      	; 0xc3a <__mulsf3+0x1c>
 c36:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_inf>
 c3a:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_nan>
 c3e:	11 24       	eor	r1, r1
 c40:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__fp_szero>

00000c44 <__mulsf3x>:
 c44:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__fp_split3>
 c48:	70 f3       	brcs	.-36     	; 0xc26 <__mulsf3+0x8>

00000c4a <__mulsf3_pse>:
 c4a:	95 9f       	mul	r25, r21
 c4c:	c1 f3       	breq	.-16     	; 0xc3e <__mulsf3+0x20>
 c4e:	95 0f       	add	r25, r21
 c50:	50 e0       	ldi	r21, 0x00	; 0
 c52:	55 1f       	adc	r21, r21
 c54:	62 9f       	mul	r22, r18
 c56:	f0 01       	movw	r30, r0
 c58:	72 9f       	mul	r23, r18
 c5a:	bb 27       	eor	r27, r27
 c5c:	f0 0d       	add	r31, r0
 c5e:	b1 1d       	adc	r27, r1
 c60:	63 9f       	mul	r22, r19
 c62:	aa 27       	eor	r26, r26
 c64:	f0 0d       	add	r31, r0
 c66:	b1 1d       	adc	r27, r1
 c68:	aa 1f       	adc	r26, r26
 c6a:	64 9f       	mul	r22, r20
 c6c:	66 27       	eor	r22, r22
 c6e:	b0 0d       	add	r27, r0
 c70:	a1 1d       	adc	r26, r1
 c72:	66 1f       	adc	r22, r22
 c74:	82 9f       	mul	r24, r18
 c76:	22 27       	eor	r18, r18
 c78:	b0 0d       	add	r27, r0
 c7a:	a1 1d       	adc	r26, r1
 c7c:	62 1f       	adc	r22, r18
 c7e:	73 9f       	mul	r23, r19
 c80:	b0 0d       	add	r27, r0
 c82:	a1 1d       	adc	r26, r1
 c84:	62 1f       	adc	r22, r18
 c86:	83 9f       	mul	r24, r19
 c88:	a0 0d       	add	r26, r0
 c8a:	61 1d       	adc	r22, r1
 c8c:	22 1f       	adc	r18, r18
 c8e:	74 9f       	mul	r23, r20
 c90:	33 27       	eor	r19, r19
 c92:	a0 0d       	add	r26, r0
 c94:	61 1d       	adc	r22, r1
 c96:	23 1f       	adc	r18, r19
 c98:	84 9f       	mul	r24, r20
 c9a:	60 0d       	add	r22, r0
 c9c:	21 1d       	adc	r18, r1
 c9e:	82 2f       	mov	r24, r18
 ca0:	76 2f       	mov	r23, r22
 ca2:	6a 2f       	mov	r22, r26
 ca4:	11 24       	eor	r1, r1
 ca6:	9f 57       	subi	r25, 0x7F	; 127
 ca8:	50 40       	sbci	r21, 0x00	; 0
 caa:	9a f0       	brmi	.+38     	; 0xcd2 <__mulsf3_pse+0x88>
 cac:	f1 f0       	breq	.+60     	; 0xcea <__mulsf3_pse+0xa0>
 cae:	88 23       	and	r24, r24
 cb0:	4a f0       	brmi	.+18     	; 0xcc4 <__mulsf3_pse+0x7a>
 cb2:	ee 0f       	add	r30, r30
 cb4:	ff 1f       	adc	r31, r31
 cb6:	bb 1f       	adc	r27, r27
 cb8:	66 1f       	adc	r22, r22
 cba:	77 1f       	adc	r23, r23
 cbc:	88 1f       	adc	r24, r24
 cbe:	91 50       	subi	r25, 0x01	; 1
 cc0:	50 40       	sbci	r21, 0x00	; 0
 cc2:	a9 f7       	brne	.-22     	; 0xcae <__mulsf3_pse+0x64>
 cc4:	9e 3f       	cpi	r25, 0xFE	; 254
 cc6:	51 05       	cpc	r21, r1
 cc8:	80 f0       	brcs	.+32     	; 0xcea <__mulsf3_pse+0xa0>
 cca:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_inf>
 cce:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__fp_szero>
 cd2:	5f 3f       	cpi	r21, 0xFF	; 255
 cd4:	e4 f3       	brlt	.-8      	; 0xcce <__mulsf3_pse+0x84>
 cd6:	98 3e       	cpi	r25, 0xE8	; 232
 cd8:	d4 f3       	brlt	.-12     	; 0xcce <__mulsf3_pse+0x84>
 cda:	86 95       	lsr	r24
 cdc:	77 95       	ror	r23
 cde:	67 95       	ror	r22
 ce0:	b7 95       	ror	r27
 ce2:	f7 95       	ror	r31
 ce4:	e7 95       	ror	r30
 ce6:	9f 5f       	subi	r25, 0xFF	; 255
 ce8:	c1 f7       	brne	.-16     	; 0xcda <__mulsf3_pse+0x90>
 cea:	fe 2b       	or	r31, r30
 cec:	88 0f       	add	r24, r24
 cee:	91 1d       	adc	r25, r1
 cf0:	96 95       	lsr	r25
 cf2:	87 95       	ror	r24
 cf4:	97 f9       	bld	r25, 7
 cf6:	08 95       	ret

00000cf8 <__fp_inf>:
 cf8:	97 f9       	bld	r25, 7
 cfa:	9f 67       	ori	r25, 0x7F	; 127
 cfc:	80 e8       	ldi	r24, 0x80	; 128
 cfe:	70 e0       	ldi	r23, 0x00	; 0
 d00:	60 e0       	ldi	r22, 0x00	; 0
 d02:	08 95       	ret

00000d04 <__fp_nan>:
 d04:	9f ef       	ldi	r25, 0xFF	; 255
 d06:	80 ec       	ldi	r24, 0xC0	; 192
 d08:	08 95       	ret

00000d0a <__fp_pscA>:
 d0a:	00 24       	eor	r0, r0
 d0c:	0a 94       	dec	r0
 d0e:	16 16       	cp	r1, r22
 d10:	17 06       	cpc	r1, r23
 d12:	18 06       	cpc	r1, r24
 d14:	09 06       	cpc	r0, r25
 d16:	08 95       	ret

00000d18 <__fp_pscB>:
 d18:	00 24       	eor	r0, r0
 d1a:	0a 94       	dec	r0
 d1c:	12 16       	cp	r1, r18
 d1e:	13 06       	cpc	r1, r19
 d20:	14 06       	cpc	r1, r20
 d22:	05 06       	cpc	r0, r21
 d24:	08 95       	ret

00000d26 <__fp_round>:
 d26:	09 2e       	mov	r0, r25
 d28:	03 94       	inc	r0
 d2a:	00 0c       	add	r0, r0
 d2c:	11 f4       	brne	.+4      	; 0xd32 <__fp_round+0xc>
 d2e:	88 23       	and	r24, r24
 d30:	52 f0       	brmi	.+20     	; 0xd46 <__fp_round+0x20>
 d32:	bb 0f       	add	r27, r27
 d34:	40 f4       	brcc	.+16     	; 0xd46 <__fp_round+0x20>
 d36:	bf 2b       	or	r27, r31
 d38:	11 f4       	brne	.+4      	; 0xd3e <__fp_round+0x18>
 d3a:	60 ff       	sbrs	r22, 0
 d3c:	04 c0       	rjmp	.+8      	; 0xd46 <__fp_round+0x20>
 d3e:	6f 5f       	subi	r22, 0xFF	; 255
 d40:	7f 4f       	sbci	r23, 0xFF	; 255
 d42:	8f 4f       	sbci	r24, 0xFF	; 255
 d44:	9f 4f       	sbci	r25, 0xFF	; 255
 d46:	08 95       	ret

00000d48 <__divmodhi4>:
 d48:	97 fb       	bst	r25, 7
 d4a:	07 2e       	mov	r0, r23
 d4c:	16 f4       	brtc	.+4      	; 0xd52 <__divmodhi4+0xa>
 d4e:	00 94       	com	r0
 d50:	07 d0       	rcall	.+14     	; 0xd60 <__divmodhi4_neg1>
 d52:	77 fd       	sbrc	r23, 7
 d54:	09 d0       	rcall	.+18     	; 0xd68 <__divmodhi4_neg2>
 d56:	0e 94 b8 06 	call	0xd70	; 0xd70 <__udivmodhi4>
 d5a:	07 fc       	sbrc	r0, 7
 d5c:	05 d0       	rcall	.+10     	; 0xd68 <__divmodhi4_neg2>
 d5e:	3e f4       	brtc	.+14     	; 0xd6e <__divmodhi4_exit>

00000d60 <__divmodhi4_neg1>:
 d60:	90 95       	com	r25
 d62:	81 95       	neg	r24
 d64:	9f 4f       	sbci	r25, 0xFF	; 255
 d66:	08 95       	ret

00000d68 <__divmodhi4_neg2>:
 d68:	70 95       	com	r23
 d6a:	61 95       	neg	r22
 d6c:	7f 4f       	sbci	r23, 0xFF	; 255

00000d6e <__divmodhi4_exit>:
 d6e:	08 95       	ret

00000d70 <__udivmodhi4>:
 d70:	aa 1b       	sub	r26, r26
 d72:	bb 1b       	sub	r27, r27
 d74:	51 e1       	ldi	r21, 0x11	; 17
 d76:	07 c0       	rjmp	.+14     	; 0xd86 <__udivmodhi4_ep>

00000d78 <__udivmodhi4_loop>:
 d78:	aa 1f       	adc	r26, r26
 d7a:	bb 1f       	adc	r27, r27
 d7c:	a6 17       	cp	r26, r22
 d7e:	b7 07       	cpc	r27, r23
 d80:	10 f0       	brcs	.+4      	; 0xd86 <__udivmodhi4_ep>
 d82:	a6 1b       	sub	r26, r22
 d84:	b7 0b       	sbc	r27, r23

00000d86 <__udivmodhi4_ep>:
 d86:	88 1f       	adc	r24, r24
 d88:	99 1f       	adc	r25, r25
 d8a:	5a 95       	dec	r21
 d8c:	a9 f7       	brne	.-22     	; 0xd78 <__udivmodhi4_loop>
 d8e:	80 95       	com	r24
 d90:	90 95       	com	r25
 d92:	bc 01       	movw	r22, r24
 d94:	cd 01       	movw	r24, r26
 d96:	08 95       	ret

00000d98 <itoa>:
 d98:	45 32       	cpi	r20, 0x25	; 37
 d9a:	51 05       	cpc	r21, r1
 d9c:	20 f4       	brcc	.+8      	; 0xda6 <itoa+0xe>
 d9e:	42 30       	cpi	r20, 0x02	; 2
 da0:	10 f0       	brcs	.+4      	; 0xda6 <itoa+0xe>
 da2:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__itoa_ncheck>
 da6:	fb 01       	movw	r30, r22
 da8:	10 82       	st	Z, r1
 daa:	cb 01       	movw	r24, r22
 dac:	08 95       	ret

00000dae <__itoa_ncheck>:
 dae:	bb 27       	eor	r27, r27
 db0:	4a 30       	cpi	r20, 0x0A	; 10
 db2:	31 f4       	brne	.+12     	; 0xdc0 <__itoa_ncheck+0x12>
 db4:	99 23       	and	r25, r25
 db6:	22 f4       	brpl	.+8      	; 0xdc0 <__itoa_ncheck+0x12>
 db8:	bd e2       	ldi	r27, 0x2D	; 45
 dba:	90 95       	com	r25
 dbc:	81 95       	neg	r24
 dbe:	9f 4f       	sbci	r25, 0xFF	; 255
 dc0:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__utoa_common>

00000dc4 <__utoa_ncheck>:
 dc4:	bb 27       	eor	r27, r27

00000dc6 <__utoa_common>:
 dc6:	fb 01       	movw	r30, r22
 dc8:	55 27       	eor	r21, r21
 dca:	aa 27       	eor	r26, r26
 dcc:	88 0f       	add	r24, r24
 dce:	99 1f       	adc	r25, r25
 dd0:	aa 1f       	adc	r26, r26
 dd2:	a4 17       	cp	r26, r20
 dd4:	10 f0       	brcs	.+4      	; 0xdda <__utoa_common+0x14>
 dd6:	a4 1b       	sub	r26, r20
 dd8:	83 95       	inc	r24
 dda:	50 51       	subi	r21, 0x10	; 16
 ddc:	b9 f7       	brne	.-18     	; 0xdcc <__utoa_common+0x6>
 dde:	a0 5d       	subi	r26, 0xD0	; 208
 de0:	aa 33       	cpi	r26, 0x3A	; 58
 de2:	08 f0       	brcs	.+2      	; 0xde6 <__utoa_common+0x20>
 de4:	a9 5d       	subi	r26, 0xD9	; 217
 de6:	a1 93       	st	Z+, r26
 de8:	00 97       	sbiw	r24, 0x00	; 0
 dea:	79 f7       	brne	.-34     	; 0xdca <__utoa_common+0x4>
 dec:	b1 11       	cpse	r27, r1
 dee:	b1 93       	st	Z+, r27
 df0:	11 92       	st	Z+, r1
 df2:	cb 01       	movw	r24, r22
 df4:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <strrev>

00000df8 <strrev>:
 df8:	dc 01       	movw	r26, r24
 dfa:	fc 01       	movw	r30, r24
 dfc:	67 2f       	mov	r22, r23
 dfe:	71 91       	ld	r23, Z+
 e00:	77 23       	and	r23, r23
 e02:	e1 f7       	brne	.-8      	; 0xdfc <strrev+0x4>
 e04:	32 97       	sbiw	r30, 0x02	; 2
 e06:	04 c0       	rjmp	.+8      	; 0xe10 <strrev+0x18>
 e08:	7c 91       	ld	r23, X
 e0a:	6d 93       	st	X+, r22
 e0c:	70 83       	st	Z, r23
 e0e:	62 91       	ld	r22, -Z
 e10:	ae 17       	cp	r26, r30
 e12:	bf 07       	cpc	r27, r31
 e14:	c8 f3       	brcs	.-14     	; 0xe08 <strrev+0x10>
 e16:	08 95       	ret

00000e18 <_exit>:
 e18:	f8 94       	cli

00000e1a <__stop_program>:
 e1a:	ff cf       	rjmp	.-2      	; 0xe1a <__stop_program>
